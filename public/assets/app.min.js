let APP_CONFIG = null;async function initConfig() {if (!APP_CONFIG) {const response = await fetch('/config');APP_CONFIG = await response.json();} return APP_CONFIG;} function getApiBaseUrl() {return APP_CONFIG?.apiBaseUrl || '/api';} const API_BASE_URL = '/api';const IMGBB_API_KEY = null;import {fetchCategories, fetchLocations, populateCategoryDropdown, updateLocationIcon, getSelectedLocation, openLocationModal, openCategoryModal, renderLocationLists, getLocationName, renderCategoryList, selectLocation, autoSelectLocation } from './locations-categories.js';import {toggleRequiredAttribute, updatePasswordStrength, checkPasswordMatch, closeAllDropdowns, compressImage, showMessage, showLoadingDialog, hideLoadingDialog, renderImagePreviews, closeFullImage } from './utils.js';document.addEventListener('DOMContentLoaded', async () => {const modalsLoadedPromise = loadModals();initializeDOMElements();const authLoadingSkeleton = document.getElementById('auth-loading-skeleton');if (authLoadingSkeleton) {authLoadingSkeleton.style.display = 'flex';} await Promise.all([fetchCategories(), fetchLocations()]);populateCategoryDropdown('category-select');await modalsLoadedPromise;initializeDOMElements();DOMElements.closeFullImage?.addEventListener('click', closeFullImage);populateCategoryDropdown('listing-category');populateCategoryDropdown('edit-listing-category');await checkAuthState().then(() => {updateAuthUI();}).finally(() => {if (authLoadingSkeleton) {authLoadingSkeleton.style.display = 'none';} });autoSelectLocation();const selectedLocation = getSelectedLocation();const locationName = selectedLocation === 'all' ? 'All' : getLocationName(selectedLocation);updateLocationIcon(locationName);parseURL();updatePasswordStrength('', 'signup-password');checkPasswordMatch('', '', DOMElements.passwordMatchFeedback);if (DOMElements.newPassword) {updatePasswordStrength('', 'new-password');} if (DOMElements.newPasswordMatchFeedback) {checkPasswordMatch('', '', DOMElements.newPasswordMatchFeedback);} const navLinks = document.querySelectorAll('nav a, .dropdown-content a');navLinks.forEach(link => {link.addEventListener('click', (e) => {e.preventDefault();const url = link.getAttribute('href');if (url === '#' || url.startsWith('#')) {return;} history.pushState({}, '', url);parseURL();});});DOMElements.logoHomeLink?.addEventListener('click', () => {renderView('home', {}, true);});window.addEventListener('scroll', function() {const header = document.querySelector('header');if (window.scrollY > 10) {header.classList.add('scrolled');} else {header.classList.remove('scrolled');} });const header = document.querySelector('header');if (window.scrollY > 10) {header.classList.add('scrolled');} DOMElements.mobileSearchIcon?.addEventListener('click', (e) => {DOMElements.searchContainer.classList.toggle('active');if (DOMElements.searchContainer.classList.contains('active')) {DOMElements.searchInput.focus();} });document.addEventListener('click', (e) => {if (!DOMElements.searchContainer.contains(e.target) && !DOMElements.mobileSearchIcon.contains(e.target)) {DOMElements.searchContainer.classList.remove('active');} });document.querySelector('.user-profile.dropdown')?.addEventListener('click', function(e) {if (e.target.closest('.dropdown-content') === null) {const dropdown = this.querySelector('.dropdown-content');dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';} });DOMElements.guestUserIcon?.addEventListener('click', function(e) {DOMElements.guestDropdown.style.display = DOMElements.guestDropdown.style.display === 'block' ? 'none' : 'block';});document.addEventListener('click', function(e) {if (!e.target.closest('.dropdown') && !e.target.closest('#guest-user-icon')) {closeAllDropdowns();} });DOMElements.mobileLoginLink?.addEventListener('click', () => {openModal(DOMElements.loginModal);});DOMElements.mobileSignupLink?.addEventListener('click', () => {openModal(DOMElements.signupModal);});document.querySelectorAll('.user-profile .dropdown-content a').forEach(item => {item.addEventListener('click', (e) => {closeAllDropdowns();});});document.querySelectorAll('#guest-dropdown a').forEach(item => {item.addEventListener('click', (e) => {closeAllDropdowns();});});DOMElements.mainContent.addEventListener('click', async (e) => {const deleteButton = e.target.closest('#delete-listing-btn');const editButton = e.target.closest('#edit-listing-btn');if (deleteButton) {e.stopPropagation();const listingId = deleteButton.getAttribute('data-id');if (listingId) {if (confirm("Are you sure you want to delete this listing? This action cannot be undone.")) {await handleDeleteListing(listingId);} } } else if (editButton) {e.stopPropagation();const listingId = editButton.getAttribute('data-id');if (listingId) {await openEditListingModal(listingId);} } });DOMElements.loginButton?.addEventListener('click', () => {openModal(DOMElements.loginModal);});DOMElements.signupButton?.addEventListener('click', () => {openModal(DOMElements.signupModal);});DOMElements.closeButtons.forEach(button => {button.addEventListener('click', () => {const modal = button.closest('.modal');closeModal(modal);});});DOMElements.switchToSignup?.addEventListener('click', () => {closeModal(DOMElements.loginModal);openModal(DOMElements.signupModal);});DOMElements.switchToLogin?.addEventListener('click', () => {closeModal(DOMElements.signupModal);openModal(DOMElements.loginModal);});DOMElements.forgotPasswordLink?.addEventListener('click', (e) => {e.preventDefault();closeModal(DOMElements.loginModal);openModal(DOMElements.forgotPasswordModal);});DOMElements.backToLoginLink?.addEventListener('click', (e) => {e.preventDefault();closeModal(DOMElements.forgotPasswordModal);openModal(DOMElements.loginModal);});DOMElements.otpModal.querySelector('.modal-close')?.addEventListener('click', () => {clearInterval(DOMElements.resendTimer);closeModal(DOMElements.otpModal);});DOMElements.loginForm?.addEventListener('submit', handleLogin);DOMElements.signupForm?.addEventListener('submit', handleSignup);DOMElements.addListingForm?.addEventListener('submit', handleAddListing);DOMElements.forgotPasswordForm?.addEventListener('submit', async (e) => {e.preventDefault();const email = DOMElements.forgotPasswordEmail.value;showLoadingDialog();try {await userAPI.forgotPassword(email);DOMElements.otpEmailForReset.value = email;openOTPModal(email, null, true);} catch (error) {showMessage(error.message || 'Email not found', 'error');} finally {hideLoadingDialog();} });DOMElements.searchButton?.addEventListener('click', () => {renderView('search');});DOMElements.locationIcon?.addEventListener('click', () => {openLocationModal('filter');});DOMElements.addListingLocationBtn?.addEventListener('click', () => {openLocationModal('add-listing');});DOMElements.editListingLocationBtn?.addEventListener('click', () => {openLocationModal('edit-listing');});DOMElements.editProfileLocationBtn?.addEventListener('click', () => {openLocationModal('edit-profile');});DOMElements.locationSearch?.addEventListener('input', (e) => {renderLocationLists(e.target.value);});DOMElements.defaultToAllButton?.addEventListener('click', () => {const purpose = DOMElements.locationModal.getAttribute('data-purpose');if (purpose === 'filter') {selectLocation('all', 'All');} });DOMElements.autoDetectLocationButton?.addEventListener('click', () => {DOMElements.autoDetectLocationButton.classList.add('clicked');showMessage('Finding your location...', 'info');autoSelectLocation();closeModal(DOMElements.locationModal);});document.querySelectorAll('.location-tabs .tab').forEach(tab => {tab.addEventListener('click', () => {document.querySelectorAll('.location-tabs .tab').forEach(t => t.classList.remove('active'));tab.classList.add('active');document.querySelectorAll('.location-section').forEach(section => section.classList.remove('active'));document.getElementById(`${tab.getAttribute('data-tab')}-list-section`)?.classList.add('active');});});DOMElements.listingCategory?.addEventListener('click', (e) => {e.preventDefault();e.stopPropagation();openCategoryModal('add-listing');DOMElements.listingCategory.blur();});DOMElements.editListingCategory?.addEventListener('click', (e) => {e.preventDefault();e.stopPropagation();const currentCategory = DOMElements.editListingCategory.value;openCategoryModal('edit-listing', currentCategory);DOMElements.editListingCategory.blur();});DOMElements.categorySelect?.addEventListener('click', (e) => {e.preventDefault();e.stopPropagation();const currentValue = DOMElements.categorySelect.value;openCategoryModal('select-only', currentValue);DOMElements.categorySelect.blur();});DOMElements.categorySearch?.addEventListener('input', (e) => {renderCategoryList(e.target.value);});DOMElements.imageUpload?.addEventListener('click', () => {DOMElements.listingImageInput.click();});DOMElements.listingImageInput?.addEventListener('change', async (e) => {const files = Array.from(e.target.files);if (files.length === 0) {return;} if (uploadedImages.length + files.length > 5) {showMessage('You can upload a maximum of 5 images in total', 'error');e.target.value = '';return;} showLoadingDialog();try {for (const file of files) {if (file.type.startsWith('image/')) {const compressedBlob = await compressImage(file);if (!compressedBlob || compressedBlob.size === 0) {showMessage(`Failed to process image: ${file.name}`, 'error');continue;} const imageUrl = await new Promise((resolve, reject) => {const reader = new FileReader();reader.onload = (event) => {resolve(event.target.result);};reader.onerror = (error) => {reject(error);};reader.readAsDataURL(compressedBlob);});addUploadedImage(imageUrl);renderImagePreviews();} else {} } } catch (error) {showMessage('An unexpected error occurred during image processing.', 'error');} finally {hideLoadingDialog();e.target.value = '';} });if (DOMElements.otpInputs && DOMElements.otpInputs.length > 0) {DOMElements.otpInputs.forEach(input => {input.addEventListener('input', handleOTPInput);input.addEventListener('keydown', handleOTPInput);});} DOMElements.resendOtpBtn?.addEventListener('click', async () => {const email = DOMElements.otpEmail.textContent;const isSignup = DOMElements.otpModal.getAttribute('data-signup-data') !== null;showLoadingDialog();try {if (isSignup) {await userAPI.signup(null, email, null);} else {await userAPI.forgotPassword(email);} clearInterval(DOMElements.resendTimer);startResendTimer();resetOTPInputs();DOMElements.otpError.style.display = 'none';showMessage('OTP resent successfully!', 'success');} catch (error) {showMessage('Error resending OTP. Please try again.', 'error');} finally {hideLoadingDialog();} });toggleRequiredAttribute('enable-phone', 'edit-profile-phone');toggleRequiredAttribute('enable-whatsapp', 'edit-profile-whatsapp');DOMElements.signupPassword?.addEventListener('input', (e) => {updatePasswordStrength(e.target.value, 'signup-password');checkPasswordMatch(e.target.value, DOMElements.signupConfirmPassword.value, DOMElements.passwordMatchFeedback);});DOMElements.signupConfirmPassword?.addEventListener('input', (e) => {checkPasswordMatch(DOMElements.signupPassword.value, e.target.value, DOMElements.passwordMatchFeedback);});DOMElements.homeLink?.addEventListener('click', () => renderView('home', {}, true));DOMElements.productsLink?.addEventListener('click', () => renderView('products', {}, true));DOMElements.servicesLink?.addEventListener('click', () => renderView('services', {}, true));DOMElements.aboutLink?.addEventListener('click', () => renderView('about'));DOMElements.contactLink?.addEventListener('click', () => renderView('contact'));DOMElements.navProfileLink?.addEventListener('click', () => renderView('profile', currentUser?.slug || currentUser?._id));DOMElements.navDashboardLink?.addEventListener('click', () => renderView('dashboard'));DOMElements.navFavoritesLink?.addEventListener('click', () => renderView('favorites'));DOMElements.navSettingsLink?.addEventListener('click', () => renderView('settings'));DOMElements.logoutLink?.addEventListener('click', handleLogout);window.addEventListener('popstate', (event) => {if (event.state && event.state.view) {renderView(event.state.view, event.state.params, false, event.state.scrollY);} else {parseURL();} });});async function handleLogin(e) {e.preventDefault();const email = DOMElements.loginEmail.value;const password = DOMElements.loginPassword.value;showLoadingDialog();try {const response = await userAPI.login(email, password);setCurrentUser(response.user);setToken(response.token);updateAuthUI();closeModal(DOMElements.loginModal);showMessage('Welcome back!', 'success');} catch (error) {showMessage(error.message || 'Invalid email or password', 'error');} finally {hideLoadingDialog();} } async function handleSignup(e) {e.preventDefault();const name = DOMElements.signupName.value;const email = DOMElements.signupEmail.value;const password = DOMElements.signupPassword.value;const confirmPassword = DOMElements.signupConfirmPassword.value;const {requirements, strength } = validatePassword(password);if (strength < 3) {showMessage('Password is too weak. Please make it stronger.', 'error');return;} if (!checkPasswordMatch(password, confirmPassword, DOMElements.passwordMatchFeedback)) {showMessage('Passwords do not match', 'error');return;} showLoadingDialog();try {const response = await userAPI.signup(name, email, password);showMessage(response.message || 'OTP sent successfully to your email', 'success');const signupData = {name, email, password, };openOTPModal(email, signupData, true);} catch (error) {showMessage(error.message || 'Error creating account', 'error');} finally {hideLoadingDialog();} } async function createAccount(signupData) {showLoadingDialog();try {const {name, email, password } = signupData;const response = await userAPI.login(email, password);setCurrentUser(response.user);setToken(response.token);closeModal(DOMElements.signupModal);updateAuthUI();renderView('profile', currentUser._id);showMessage('Welcome to Keid!', 'success');} catch (error) {showMessage(error.message || 'Error creating account', 'error');} finally {hideLoadingDialog();} } function handleLogout() {const confirmLogout = confirm("Are you sure you want to log out?");if (confirmLogout) {setCurrentUser(null);removeToken();updateAuthUI();renderView('home');showMessage('Logged out successfully', 'success');} } async function checkAuthState() {const token = getToken();if (token) {try {const response = await userAPI.verifyAuth();if (response.isValid) {setCurrentUser(response.user);updateAuthUI();return true;} else {removeToken();return false;} } catch (error) {console.error('Auth validation failed:', error);removeToken();return false;} } return false;} function updateAuthUI() {if (currentUser) {DOMElements.userActions.style.display = 'none';DOMElements.userProfile.style.display = 'flex';DOMElements.navProfileImg.src = currentUser.profilePic;} else {DOMElements.userActions.style.display = 'flex';DOMElements.userProfile.style.display = 'none';} } function setToken(token) {localStorage.setItem('userToken', token);} function getToken() {return localStorage.getItem('userToken');} function removeToken() {localStorage.removeItem('userToken');} async function fetchAPI(endpoint, options = {}) {try {const response = await fetch(`${getApiBaseUrl()}${endpoint}`, {headers: {'Content-Type': 'application/json', ...options.headers }, ...options });const result = await response.json();if (!response.ok) {throw new Error(result.message || 'API request failed');} return result;} catch (error) {console.error('API Error:', error);throw error;} } async function fetchAPIWithAuth(endpoint, options = {}) {const token = getToken();const headers = {'Content-Type': 'application/json', ...options.headers };if (token) {headers['Authorization'] = `Bearer ${token}`;} try {const response = await fetch(`${getApiBaseUrl()}${endpoint}`, {headers, ...options });const result = await response.json();if (!response.ok) {throw new Error(result.message || 'API request failed');} return result;} catch (error) {console.error('API Error (Auth):', error);throw error;} } const userAPI = {login: async (email, password) => {const res = await fetchAPI('/auth/login', {method: 'POST', body: JSON.stringify({email, password }) });return res;}, signup: async (name, email, password) => {const res = await fetchAPI('/auth/signup', {method: 'POST', body: JSON.stringify({name, email, password }) });return res;}, verifyOTP: async (email, otp, isSignup = false) => {const res = await fetchAPI(`/auth/verify-otp${isSignup ? '?signup=true' : ''}`, {method: 'POST', body: JSON.stringify({email, otp }) });return res;}, forgotPassword: async (email) => {const res = await fetchAPI('/auth/forgot-password', {method: 'POST', body: JSON.stringify({email }) });return res;}, resetPassword: async (resetToken, password) => {const res = await fetchAPI('/auth/reset-password/' + resetToken, {method: 'PUT', body: JSON.stringify({password }) });return res;}, verifyAuth: async () => {const res = await fetchAPIWithAuth('/auth/verify');return res;}, getProfile: async (identifier) => {const res = await fetchAPIWithAuth(`/users/${identifier}`);return res.user;}, getUsers: async (params = {}) => {const queryParams = new URLSearchParams(params);const res = await fetchAPIWithAuth(`/users?${queryParams.toString()}`);return res.users;}, updateProfile: async (userId, userData) => {const res = await fetchAPIWithAuth(`/users/${userId}`, {method: 'PUT', body: JSON.stringify(userData) });return res.user;}, updatePassword: async (userId, password) => {const res = await fetchAPIWithAuth(`/users/${userId}/password`, {method: 'PUT', body: JSON.stringify({password }) });return res;}, getUserListings: async (identifier) => {const res = await fetchAPIWithAuth(`/users/${identifier}/listings`);return res.listings;}, getUserFavorites: async (userId) => {const res = await fetchAPIWithAuth(`/users/${userId}/favorites`);return res.listings;}, };const listingAPI = {getAllListings: async (type = null, category = null, location = null, query = null, sort = null) => {const queryParams = new URLSearchParams();if (type) queryParams.append('type', type);if (category) queryParams.append('category', category);if (location) queryParams.append('location', location);if (query) queryParams.append('query', query);if (sort) queryParams.append('sort', sort);const res = await fetchAPIWithAuth(`/listings?${queryParams.toString()}`);return res.listings;}, getListing: async (identifier) => {const res = await fetchAPIWithAuth(`/listings/${identifier}`);return res.listing;}, createListing: async (listingData) => {const res = await fetchAPIWithAuth('/listings', {method: 'POST', body: JSON.stringify(listingData) });return res.listing;}, updateListing: async (id, listingData) => {const res = await fetchAPIWithAuth(`/listings/${id}`, {method: 'PUT', body: JSON.stringify(listingData) });return res.listing;}, deleteListing: async (id) => {const res = await fetchAPIWithAuth(`/listings/${id}`, {method: 'DELETE' });return res;}, search: async (query, category, location) => {const res = await listingAPI.getAllListings(null, category, location, query, null);return res;} };const interactionAPI = {toggleFavorite: async ({listingId }) => {const res = await fetchAPIWithAuth('/interactions/favorite', {method: 'POST', body: JSON.stringify({listingId }) });return res;}, getFavoriteStatus: async (listingId) => {const res = await fetchAPIWithAuth(`/interactions/favorite/status/${listingId}`);return res;}, toggleLike: async ({listingId = null, profileId = null }) => {const body = listingId ? {listingId } : {profileId };const res = await fetchAPIWithAuth('/interactions/like', {method: 'POST', body: JSON.stringify(body) });return res;}, getLikeStatus: async (targetId) => {const res = await fetchAPIWithAuth(`/interactions/like/status/${targetId}`);return res;}, };const followerAPI = {toggleFollow: async (followedId) => {const res = await fetchAPIWithAuth('/interactions/follow', {method: 'POST', body: JSON.stringify({followedId }) });return res;}, getFollowStatus: async (followedId) => {const res = await fetchAPIWithAuth(`/interactions/follow/status/${followedId}`);return res;}, getFollowerCount: async (userId) => {const user = await userAPI.getProfile(userId);return user.followerCount || 0;}, getFollowingCount: async (userId) => {const user = await userAPI.getProfile(userId);return user.followingCount || 0;}, getUserFollowers: async (userId) => {console.warn('getUserFollowers is not directly supported by new backend API structure for public display.');return [];}, getUserFollowing: async (userId) => {console.warn('getUserFollowing is not directly supported by new backend API structure for public display.');return [];} };const reportAPI = {submitReport: async (reportedUserId, reason, description) => {const res = await fetchAPIWithAuth('/reports', {method: 'POST', body: JSON.stringify({reportedUserId, reason, description }) });return res;} };const DOMElements = {};DOMElements.mainContent = document.getElementById('main-content');DOMElements.loginButton = document.getElementById('login-button');DOMElements.signupButton = document.getElementById('signup-button');DOMElements.mobileSearchIcon = document.getElementById('mobile-search-icon');DOMElements.searchContainer = document.getElementById('search-container');DOMElements.searchInput = document.getElementById('search-input');DOMElements.guestUserIcon = document.getElementById('guest-user-icon');DOMElements.guestDropdown = document.getElementById('guest-dropdown');DOMElements.userActions = document.getElementById('user-actions');DOMElements.userProfile = document.getElementById('user-profile');DOMElements.navProfileImg = document.getElementById('nav-profile-img');DOMElements.mobileLoginLink = document.getElementById('mobile-login-link');DOMElements.mobileSignupLink = document.getElementById('mobile-signup-link');DOMElements.logoHomeLink = document.getElementById('logo-home-link');DOMElements.homeLink = document.getElementById('home-link');DOMElements.productsLink = document.getElementById('products-link');DOMElements.servicesLink = document.getElementById('services-link');DOMElements.aboutLink = document.getElementById('about-link');DOMElements.contactLink = document.getElementById('contact-link');DOMElements.navProfileLink = document.getElementById('nav-profile-link');DOMElements.navDashboardLink = document.getElementById('nav-dashboard-link');DOMElements.navFavoritesLink = document.getElementById('nav-favorites-link');DOMElements.navSettingsLink = document.getElementById('nav-settings-link');DOMElements.logoutLink = document.getElementById('logout-link');DOMElements.locationIcon = document.getElementById('location-icon');DOMElements.locationText = document.getElementById('location-text'), DOMElements.categorySelect = document.getElementById('category-select');DOMElements.searchButton = document.getElementById('search-button');DOMElements.loginModal = document.getElementById('login-modal');DOMElements.signupModal = document.getElementById('signup-modal');DOMElements.forgotPasswordModal = document.getElementById('forgot-password-modal');DOMElements.otpModal = document.getElementById('otp-modal');DOMElements.addListingModal = document.getElementById('add-listing-modal');DOMElements.editListingModal = document.getElementById('edit-listing-modal');DOMElements.locationModal = document.getElementById('location-modal');DOMElements.categoryModal = document.getElementById('category-modal');DOMElements.editProfileModal = document.getElementById('edit-profile-modal');DOMElements.contactModal = document.getElementById('contact-modal');DOMElements.loadingModal = document.getElementById('loading-modal');DOMElements.termsModal = document.getElementById('terms-modal');DOMElements.privacyModal = document.getElementById('privacy-modal');DOMElements.shareModal = document.getElementById('share-modal');DOMElements.fullImageView = document.getElementById('full-image-view');DOMElements.fullImage = document.getElementById('full-image');DOMElements.closeFullImage = document.getElementById('close-full-image');DOMElements.resetPasswordModal = document.getElementById('reset-password-modal');DOMElements.shareProfileModal = document.getElementById('share-profile-modal');DOMElements.shareProfileFacebook = document.getElementById('share-profile-facebook');DOMElements.shareProfileTwitter = document.getElementById('share-profile-twitter');DOMElements.shareProfileWhatsapp = document.getElementById('share-profile-whatsapp');DOMElements.shareProfileUrl = document.getElementById('share-profile-url');DOMElements.copyProfileUrlBtn = document.getElementById('copy-profile-url-btn');DOMElements.reportUserModal = document.getElementById('report-user-modal');DOMElements.reportUserForm = document.getElementById('report-user-form');DOMElements.reportedUserName = document.getElementById('reported-user-name');DOMElements.reportedUserIdInput = document.getElementById('reported-user-id-input');DOMElements.reportReason = document.getElementById('report-reason');DOMElements.reportDescription = document.getElementById('report-description');DOMElements.closeButtons = document.querySelectorAll('.modal-close, .modal-close-btn');DOMElements.switchToSignup = document.getElementById('switch-to-signup');DOMElements.switchToLogin = document.getElementById('switch-to-login');DOMElements.forgotPasswordLink = document.getElementById('forgot-password-link');DOMElements.backToLoginLink = document.getElementById('back-to-login');DOMElements.loginForm = document.getElementById('login-form');DOMElements.loginEmail = document.getElementById('login-email');DOMElements.loginPassword = document.getElementById('login-password');DOMElements.signupForm = document.getElementById('signup-form');DOMElements.signupName = document.getElementById('signup-name');DOMElements.signupEmail = document.getElementById('signup-email');DOMElements.signupPassword = document.getElementById('signup-password');DOMElements.signupConfirmPassword = document.getElementById('signup-confirm-password');DOMElements.passwordMatchFeedback = document.getElementById('password-match-feedback');DOMElements.forgotPasswordForm = document.getElementById('forgot-password-form');DOMElements.forgotPasswordEmail = document.getElementById('forgot-password-email');DOMElements.otpInputs = document.querySelectorAll('.otp-input');DOMElements.resendOtpBtn = document.getElementById('resend-otp-btn');DOMElements.resendText = document.getElementById('resend-text');DOMElements.resendTimer = document.getElementById('resend-timer');DOMElements.otpEmail = document.getElementById('otp-email');DOMElements.otpEmailForReset = document.getElementById('otp-email-for-reset');DOMElements.otpError = document.getElementById('otp-error');DOMElements.resetPasswordForm = document.getElementById('reset-password-form');DOMElements.resetTokenInput = document.getElementById('reset-token-input');DOMElements.newPassword = document.getElementById('new-password');DOMElements.confirmNewPassword = document.getElementById('confirm-new-password');DOMElements.newPasswordMatchFeedback = document.getElementById('new-password-match-feedback');DOMElements.addListingForm = document.getElementById('add-listing-form');DOMElements.listingTitle = document.getElementById('listing-title');DOMElements.listingDescription = document.getElementById('listing-description');DOMElements.listingPrice = document.getElementById('listing-price');DOMElements.listingCategory = document.getElementById('listing-category');DOMElements.listingType = document.getElementById('listing-type');DOMElements.listingImageInput = document.getElementById('image-input');DOMElements.listingImagePreview = document.getElementById('image-preview');DOMElements.addListingLocationBtn = document.getElementById('add-listing-location-btn');DOMElements.listingLocationId = document.getElementById('listing-location-id');DOMElements.listingLocationName = document.getElementById('listing-location-name');DOMElements.editListingForm = document.getElementById('edit-listing-form');DOMElements.editListingTitle = document.getElementById('edit-listing-title');DOMElements.editListingDescription = document.getElementById('edit-listing-description');DOMElements.editListingPrice = document.getElementById('edit-listing-price');DOMElements.editListingCategory = document.getElementById('edit-listing-category');DOMElements.editListingType = document.getElementById('edit-listing-type');DOMElements.editImageInput = document.getElementById('edit-image-input');DOMElements.editImagePreview = document.getElementById('edit-image-preview');DOMElements.editListingLocationBtn = document.getElementById('edit-listing-location-btn');DOMElements.editListingLocationId = document.getElementById('edit-listing-location-id');DOMElements.editListingLocationName = document.getElementById('edit-listing-location-name');DOMElements.locationSearch = document.getElementById('location-search');DOMElements.cityList = document.getElementById('city-list');DOMElements.campusList = document.getElementById('campus-list');DOMElements.defaultToAllButton = document.getElementById('default-to-all-button');DOMElements.autoDetectLocationButton = document.getElementById('auto-detect-location-button');DOMElements.categorySearch = document.getElementById('category-search');DOMElements.categoryList = document.getElementById('category-list');DOMElements.imageUpload = document.getElementById('image-upload');DOMElements.editImageUpload = document.getElementById('edit-image-upload');DOMElements.settingsName = document.getElementById('settings-name');DOMElements.settingsEmail = document.getElementById('settings-email');DOMElements.settingsPassword = document.getElementById('settings-password');DOMElements.settingsConfirmPassword = document.getElementById('settings-confirm-password');DOMElements.editProfileForm = document.getElementById('edit-profile-form');DOMElements.editProfileDisplayName = document.getElementById('edit-profile-display-name');DOMElements.editProfileLocationName = document.getElementById('edit-profile-location-name');DOMElements.editProfileLocationBtn = document.getElementById('edit-profile-location-btn');DOMElements.editProfileLocationId = document.getElementById('edit-profile-location-id');DOMElements.editProfilePhone = document.getElementById('edit-profile-phone');DOMElements.editProfileWhatsapp = document.getElementById('edit-profile-whatsapp');DOMElements.editProfileBio = document.getElementById('edit-profile-bio');DOMElements.editProfilePicPreview = document.getElementById('edit-profile-pic-preview');DOMElements.editProfilePicUpload = document.getElementById('edit-profile-pic-upload');DOMElements.editProfilePicInput = document.getElementById('edit-profile-pic-input');DOMElements.enablePhone = document.getElementById('enable-phone');DOMElements.enableWhatsapp = document.getElementById('enable-whatsapp');DOMElements.contactUsForm = document.getElementById('contact-us-form');DOMElements.contactUsName = document.getElementById('contact-us-name');DOMElements.contactUsEmail = document.getElementById('contact-us-email');DOMElements.contactUsSubject = document.getElementById('contact-us-subject');DOMElements.contactUsMessage = document.getElementById('contact-us-message');DOMElements.contactName = document.getElementById('contact-name');DOMElements.whatsappBtn = document.getElementById('whatsapp-btn');DOMElements.callBtn = document.getElementById('call-btn');} async function handleLikeListing(listingId, event) {const button = event?.currentTarget || document.querySelector(`[data-id="${listingId}"] .listing-like, #like-listing-btn`);if (!button) {console.error('Like button not found for listing:', listingId);return;} if (!currentUser?._id) {showMessage('Please login to like listings', 'error');openModal(DOMElements.loginModal);return;} button.disabled = true;const originalContent = button.innerHTML;button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';try {const response = await interactionAPI.toggleLike({listingId: listingId });const isCurrentlyLiked = response.isLiked;const updatedListing = await listingAPI.getListing(listingId);const currentLikes = updatedListing.likesCount || 0;updateLikeButtonUI(button, isCurrentlyLiked, listingId, currentLikes);showMessage(isCurrentlyLiked ? 'Liked!' : 'Removed like', 'success');} catch (error) {console.error('Like error:', error);showMessage(error.message || 'Failed to like', 'error');button.innerHTML = originalContent;} finally {button.disabled = false;} } function updateLikeButtonUI(button, isLiked, listingId, likesCount) {const iconClass = isLiked ? 'fas fa-thumbs-up liked-icon' : 'far fa-thumbs-up';const newCount = likesCount;const likeText = newCount === 1 ? '1 Like' : `${newCount} Likes`;if (button.id === 'like-listing-btn') {button.innerHTML = ` <i class="${iconClass}"></i> ${likeText} `;} else {button.innerHTML = '';const icon = document.createElement('i');icon.className = iconClass;button.appendChild(icon);button.appendChild(document.createTextNode(` ${likeText}`));} button.classList.toggle('active', isLiked);document.querySelectorAll(`.listing-like[data-id="${listingId}"]`).forEach(btn => {if (btn !== button) {btn.innerHTML = '';const newIcon = document.createElement('i');newIcon.className = iconClass;btn.appendChild(newIcon);btn.appendChild(document.createTextNode(` ${likeText}`));btn.classList.toggle('active', isLiked);} });} function setupLikeButtons() {document.querySelectorAll('.listing-like').forEach(button => {button.addEventListener('click', async (e) => {e.stopPropagation();const listingId = button.closest('.listing-card')?.getAttribute('data-id') || button.getAttribute('data-id');if (listingId) {await handleLikeListing(listingId, e);} });});DOMElements.mainContent.querySelector('#like-listing-btn')?.addEventListener('click', async (e) => {const currentListingId = DOMElements.mainContent.dataset.currentListingId;if (currentListingId) {await handleLikeListing(currentListingId, e);} });document.querySelectorAll('.listing-favorite').forEach(button => {button.addEventListener('click', async (e) => {e.stopPropagation();const listingId = button.closest('.listing-card')?.getAttribute('data-id') || button.getAttribute('data-id');if (listingId) await handleFavoriteListing(listingId, e);});});DOMElements.mainContent.querySelector('#favorite-listing-btn')?.addEventListener('click', async (e) => {const currentListingId = DOMElements.mainContent.dataset.currentListingId;if (currentListingId) await handleFavoriteListing(currentListingId, e);});} async function handleFavoriteListing(listingId, event) {const button = event?.currentTarget || document.querySelector(`[data-id="${listingId}"] .listing-favorite, #favorite-listing-btn`);if (!button) {console.error('Favorite button not found');return;} if (!currentUser?._id) {showMessage('Please login to save listings', 'error');openModal(DOMElements.loginModal);return;} button.disabled = true;const originalContent = button.innerHTML;button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';try {const response = await interactionAPI.toggleFavorite({listingId: listingId });const isCurrentlyFavorited = response.isFavorited;updateFavoriteButtonUI(button, isCurrentlyFavorited, listingId);showMessage(isCurrentlyFavorited ? 'Saved!' : 'Unsaved', 'success');} catch (error) {console.error('Favorite error:', error);showMessage(error.message || 'Failed to save', 'error');button.innerHTML = originalContent;} finally {button.disabled = false;} } function updateFavoriteButtonUI(button, isFavorited, listingId) {const iconClass = isFavorited ? 'fas fa-bookmark favorited-icon' : 'far fa-bookmark';if (button.id === 'favorite-listing-btn') {button.innerHTML = ` <i class="${iconClass}"></i> <span>${isFavorited ? 'Saved' : 'Save'}</span> `;} else {button.innerHTML = '';const icon = document.createElement('i');icon.className = iconClass;button.appendChild(icon);} button.classList.toggle('active', isFavorited);document.querySelectorAll(`.listing-favorite[data-id="${listingId}"]`).forEach(btn => {if (btn !== button) {btn.innerHTML = '';const newIcon = document.createElement('i');newIcon.className = iconClass;btn.appendChild(newIcon);btn.classList.toggle('active', isFavorited);} });} async function toggleFollowStatus(profileId) {if (!currentUser) {showMessage('Please login to follow users', 'error');openModal(DOMElements.loginModal);return;} const followBtn = document.getElementById('follow-profile-btn');const followerCountElement = document.getElementById('follower-count');let currentFollowerCount = parseInt(followerCountElement.textContent.split(' ')[0]) || 0;if (followBtn.disabled) return;followBtn.disabled = true;followBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';try {const response = await followerAPI.toggleFollow(profileId);const isCurrentlyFollowing = response.isFollowing;if (isCurrentlyFollowing) {followBtn.classList.add('active');followBtn.innerHTML = '<i class="fas fa-user"></i> Following';currentFollowerCount += 1;showMessage('You are now following this user', 'success');} else {followBtn.classList.remove('active');followBtn.innerHTML = '<i class="far fa-user"></i> Follow';currentFollowerCount = Math.max(0, currentFollowerCount - 1);showMessage('You have unfollowed this user', 'success');} followerCountElement.textContent = `${currentFollowerCount === 1 ? '1 Follower' : `${currentFollowerCount} Followers`}`;} catch (error) {console.error('Error toggling follow status:', error);showMessage(error.message || 'Failed to update follow status. Please try again.', 'error');} finally {followBtn.disabled = false;} } function createListingCard(listing, options = {}) {if (!listing) return '';const {isDashboard = false, hideLikes = false, hideListedBy = false, hideLocation = false } = options;const isLiked = currentUser && listing.isLiked;const isFavorited = currentUser && listing.isFavorited;const userProfileIdentifier = listing.userId?.slug || listing.userId?._id || listing.userId;return ` <div class="listing-card" data-id="${listing._id}"> <div class="listing-image" style="background-image: url('${listing.images[0]}')"> <div class="listing-type ${listing.type === 'product' ? 'type-product' : 'type-service'}">${listing.type}</div> </div> <div class="listing-content"> <h3 class="listing-title">${listing.title}</h3> <p class="listing-price">$${listing.price}</p> ${!hideLocation ? ` <p class="listing-location"><i class="fas fa-map-marker-alt"></i> ${getLocationName(listing.location)}</p> ` : ''} ${!hideListedBy ? ` <p class="listing-lister"><i class="fas fa-user"></i> Listed by: <a href="#" class="view-owner-profile-link" data-user-identifier="${userProfileIdentifier}">${listing.userId?.displayName || 'View Profile'}</a></p> ` : ''} <div class="listing-actions"> ${isDashboard ? ` <button class="btn-info btn-sm edit-listing-card-btn" data-id="${listing._id}">Edit</button> <button class="btn-danger btn-sm delete-listing-card-btn" data-id="${listing._id}">Delete</button> ` : ` ${!hideLikes ? ` <button class="listing-like ${isLiked ? 'active' : ''}" data-id="${listing._id}"> <i class="${isLiked ? 'fas' : 'far'} fa-thumbs-up ${isLiked ? 'liked-icon' : ''}"></i> ${listing.likesCount || 0} </button> <button class="listing-favorite ${isFavorited ? 'active' : ''}" data-id="${listing._id}"> <i class="${isFavorited ? 'fas' : 'far'} fa-bookmark ${isFavorited ? 'favorited-icon' : ''}"></i> </button> ` : ''} `} </div> </div> </div> `;} function createUserCard(user) {if (!user) return '';const userProfileIdentifier = user.slug || user._id;return ` <div class="user-card" data-user-identifier="${userProfileIdentifier}"> <img src="${user.profilePic || '/default-profile.png'}" alt="${user.displayName}" class="user-card-avatar"> <h3 class="user-card-name">${user.displayName}</h3> <p class="user-card-stats">${user.totalListings || 0} Listings | ${user.likesReceived || 0} Listing Likes</p> <button class="btn-primary btn-sm view-profile-btn">View Profile</button> </div> `;} function addListingCardEventListeners() {setupLikeButtons();document.querySelectorAll('.listing-card').forEach(card => {card.addEventListener('click', (e) => {if (!e.target.closest('.listing-like, .listing-favorite, .edit-listing-card-btn, .delete-listing-card-btn, .view-owner-profile-link')) {const listingId = card.getAttribute('data-id');if (listingId) {const fullListingObject = tempListingCache.get(listingId);if (fullListingObject) {renderView('listing-detail', fullListingObject);} else {console.warn(`Listing with ID ${listingId} not found in tempListingCache, fetching from API.`);renderView('listing-detail', listingId);} } } });});document.querySelectorAll('.edit-listing-card-btn').forEach(button => {button.addEventListener('click', async (e) => {e.stopPropagation();const listingId = button.getAttribute('data-id');if (listingId) {await openEditListingModal(listingId);} });});document.querySelectorAll('.delete-listing-card-btn').forEach(button => {button.addEventListener('click', async (e) => {e.stopPropagation();const listingId = button.getAttribute('data-id');if (listingId) {if (confirm("Are you sure you want to delete this listing? This action cannot be undone.")) {await handleDeleteListing(listingId);} } });});document.querySelectorAll('.view-owner-profile-link').forEach(link => {link.addEventListener('click', (e) => {e.stopPropagation();e.preventDefault();const userIdentifier = link.getAttribute('data-user-identifier');renderView('profile', userIdentifier);});});document.querySelectorAll('.user-card').forEach(card => {card.addEventListener('click', (e) => {if (!e.target.closest('.view-profile-btn')) {const userIdentifier = card.getAttribute('data-user-identifier');renderView('profile', userIdentifier);} });});document.querySelectorAll('.user-card .view-profile-btn').forEach(button => {button.addEventListener('click', (e) => {e.stopPropagation();const userIdentifier = button.closest('.user-card').getAttribute('data-user-identifier');renderView('profile', userIdentifier);});});setupRevealAnimation();} async function handleAddListing(e) {e.preventDefault();if (!currentUser) {showMessage('Please login to add a listing', 'error');return;} const phone = currentUser.phone || '';const whatsapp = currentUser.whatsapp || '';const location = currentUser.location || '';if ((phone.length < 5 && whatsapp.length < 5) || !location || (phone === '' && whatsapp === '') || location === 'Not specified') {showMessage('Please set up your profile first. Make sure phone/whatsapp and location are set.', 'error');return;} const type = DOMElements.listingType.value;const title = DOMElements.listingTitle.value;const price = parseFloat(DOMElements.listingPrice.value);const listingLocation = DOMElements.listingLocationId.value;if (!listingLocation) {showMessage('Please select a location', 'error');return;} const category = DOMElements.listingCategory.value;const description = DOMElements.listingDescription.value;if (uploadedImages.length === 0) {showMessage('Please upload at least one image', 'error');return;} showLoadingDialog();try {const uploadedImageUrls = [];for (const image of uploadedImages) {const formData = new FormData();const blob = await fetch(image).then(r => r.blob());formData.append('image', blob);const response = await fetch(`https: method: 'POST', body: formData });const result = await response.json();if (result.success) {uploadedImageUrls.push(result.data.url);} else {throw new Error(result.error?.message || 'Failed to upload image to ImgBB');} } const newListingData = {type, title, price, description, location: listingLocation, category, images: uploadedImageUrls, userId: currentUser._id };const newListing = await listingAPI.createListing(newListingData);setCachedUserListings(null);setCachedUserFavorites(null);if (currentUser && currentUser.slug) {cachedUserProfile[currentUser.slug] = {data: null, timestamp: 0 };} setUploadedImages([]);DOMElements.addListingForm.reset();DOMElements.listingImagePreview.innerHTML = '';closeModal(DOMElements.addListingModal);showMessage('Listing added successfully', 'success');renderView('dashboard');switchTab('listings-content');} catch (error) {console.error('Error adding listing:', error);showMessage(error.message || 'Error adding listing', 'error');} finally {hideLoadingDialog();} } function openListingCreator() {if (!currentUser) {showMessage('Please login to add a listing', 'error');return;} const phone = currentUser.phone || '';const whatsapp = currentUser.whatsapp || '';const location = currentUser.location || '';if ((phone.length < 5 && whatsapp.length < 5) || !location || (phone === '' && whatsapp === '') || location === 'Not specified') {showMessage('Please set up your profile first. Make sure phone/whatsapp and location are set.', 'error');return;} const locationName = getLocationName(location);DOMElements.listingLocationName.value = locationName;DOMElements.listingLocationId.value = location;setUploadedImages([]);DOMElements.listingImagePreview.innerHTML = '';openModal(DOMElements.addListingModal);} async function openEditListingModal(listingId) {showLoadingDialog();try {const editListingModal = DOMElements.editListingModal;const editListingForm = DOMElements.editListingForm;const listing = await listingAPI.getListing(listingId);if (!listing) {showMessage('Listing not found', 'error');return;} const locationName = getLocationName(listing.location);DOMElements.editListingType.value = listing.type;DOMElements.editListingTitle.value = listing.title;DOMElements.editListingPrice.value = listing.price;DOMElements.editListingLocationName.value = locationName;DOMElements.editListingLocationId.value = listing.location;DOMElements.editListingCategory.value = listing.category;DOMElements.editListingDescription.value = listing.description;let currentEditImages = [...listing.images];renderEditListingImagePreviews(currentEditImages);DOMElements.editImageUpload.onclick = () => {DOMElements.editImageInput.click();};DOMElements.editImageInput.onchange = async (e) => {const files = Array.from(e.target.files);if (files.length === 0) return;if (currentEditImages.length + files.length > 5) {showMessage('You can upload a maximum of 5 images in total', 'error');e.target.value = '';return;} showLoadingDialog();try {for (const file of files) {if (file.type.startsWith('image/')) {const compressedBlob = await compressImage(file);const imageUrl = await new Promise((resolve) => {const reader = new FileReader();reader.onload = (event) => resolve(event.target.result);reader.readAsDataURL(compressedBlob);});currentEditImages.push(imageUrl);} } renderEditListingImagePreviews(currentEditImages);} catch (error) {console.error('Error processing new images for edit:', error);showMessage(error.message || 'Error processing new images for edit', 'error');} finally {hideLoadingDialog();e.target.value = '';} };editListingForm.onsubmit = async (e) => {e.preventDefault();showLoadingDialog();try {const uploadedImageUrls = [];for (const image of currentEditImages) {if (image.startsWith('data:')) {const formData = new FormData();const blob = await fetch(image).then(r => r.blob());formData.append('image', blob);const response = await fetch(`https: method: 'POST', body: formData });const result = await response.json();if (result.success) {uploadedImageUrls.push(result.data.url);} else {throw new Error(result.error?.message || 'Failed to upload image to ImgBB');} } else {uploadedImageUrls.push(image);} } const updatedListingData = {type: DOMElements.editListingType.value, title: DOMElements.editListingTitle.value, price: parseFloat(DOMElements.editListingPrice.value), location: DOMElements.editListingLocationId.value, category: DOMElements.editListingCategory.value, description: DOMElements.editListingDescription.value, images: uploadedImageUrls };if (!updatedListingData.location) {showMessage('Please select a location', 'error');return;} await listingAPI.updateListing(listing._id, updatedListingData);setCachedUserListings(null);setCachedUserFavorites(null);if (currentUser && currentUser.slug) {cachedUserProfile[currentUser.slug] = {data: null, timestamp: 0 };} setCachedListingDetails(listing.slug, null);setCachedListingDetails(listing._id, null);showMessage('Listing updated successfully!', 'success');closeModal(editListingModal);const currentViewName = DOMElements.mainContent.dataset.currentView;const currentListingIdOnPage = DOMElements.mainContent.dataset.currentListingId;if (currentViewName === 'listing-detail' && currentListingIdOnPage === listing._id) {renderView('listing-detail', listing.slug);} else if (currentViewName === 'dashboard') {renderView('dashboard');} else {renderView('dashboard');} } catch (error) {console.error('Error updating listing:', error);showMessage(error.message || 'Error updating listing', 'error');} finally {hideLoadingDialog();} };openModal(editListingModal);} catch (error) {console.error('Error opening edit listing modal:', error);showMessage(error.message || 'Error loading listing data', 'error');} finally {hideLoadingDialog();} } async function handleDeleteListing(listingId) {if (!currentUser) {showMessage('Please login to delete a listing', 'error');return;} showLoadingDialog();try {const listingToDelete = await listingAPI.getListing(listingId);if (!listingToDelete) {throw new Error("Listing not found for deletion.");} await listingAPI.deleteListing(listingId);setCachedUserListings(null);setCachedUserFavorites(null);if (currentUser && currentUser.slug) {cachedUserProfile[currentUser.slug] = {data: null, timestamp: 0 };} setCachedListingDetails(listingToDelete.slug, null);setCachedListingDetails(listingToDelete._id, null);showMessage('Listing removed', 'success');renderView('dashboard');} catch (error) {console.error('Error deleting listing:', error);showMessage(error.message || 'Error deleting listing', 'error');} finally {hideLoadingDialog();} } import {setCategories, setLocations, categories, locations, filterLocation, setFilterLocation, cachedStaticCategories, cachedStaticLocations, setCachedStaticCategories, setCachedStaticLocations } from './state.js';import DOMElements from './dom.js';import {showMessage } from './utils.js';import {closeModal, openModal } from './modals.js';import {renderView } from './views/core.js';import {setCachedCombinedListings, setCachedProducts, setCachedServices } from './state.js';const STATIC_DATA_VERSION = 2;function toRad(value) {return value * Math.PI / 180;} function calculateDistance(userLat, lon1, lat2, lon2) {const R = 6371;const dLat = toRad(lat2 - userLat);const dLon = toRad(lon2 - lon1);const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(userLat)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));const distance = R * c;return distance;} function findClosestCity(userLat, userLon) {let closestCity = null;let minDistance = Infinity;if (locations && locations.cities) {for (const city of locations.cities) {if (city.lat !== undefined && city.lon !== undefined) {const distance = calculateDistance(userLat, userLon, city.lat, city.lon);if (distance < minDistance) {minDistance = distance;closestCity = city.id;} } } } return closestCity;} async function autoSelectLocation() {const wasButtonClicked = DOMElements.autoDetectLocationButton.classList.contains('clicked');if (!wasButtonClicked && localStorage.getItem('selectedLocation') && localStorage.getItem('selectedLocation') !== 'all') {return;} DOMElements.autoDetectLocationButton.classList.remove('clicked');if (!navigator.geolocation) {showMessage('Geolocation is not supported by your browser.', 'error');return;} try {const position = await new Promise((resolve, reject) => {navigator.geolocation.getCurrentPosition(resolve, reject, {enableHighAccuracy: false, timeout: 5000, maximumAge: 0 });});const userLat = position.coords.latitude;const userLon = position.coords.longitude;const closestCityId = findClosestCity(userLat, userLon);if (closestCityId) {const cityData = locations.cities.find(city => city.id === closestCityId);if (cityData) {const oldSelectedLocation = getSelectedLocation();setFilterLocation(closestCityId);updateLocationIcon(cityData.name);showMessage(`Auto selected: ${cityData.name}`, 'success');if (oldSelectedLocation !== closestCityId) {setCachedCombinedListings({data: null, timestamp: 0 });setCachedProducts({data: null, timestamp: 0 });setCachedServices({data: null, timestamp: 0 });} } } else {showMessage('Could not find a closest supported city.', 'error');} } catch (error) {console.warn('Geolocation error:', error.message);let errorMessage = 'Error detecting location.';switch (error.code) {case error.PERMISSION_DENIED: errorMessage = "Location access denied. Please enable it in your browser settings.";break;case error.POSITION_UNAVAILABLE: errorMessage = "Location information is unavailable.";break;case error.TIMEOUT: errorMessage = "Location request timed out.";break;case error.UNKNOWN_ERROR: errorMessage = "An unknown error occurred during location detection.";break;} showMessage(errorMessage, 'error');if (!localStorage.getItem('selectedLocation')) {setFilterLocation('all');updateLocationIcon('All');} } } function selectLocation(id, name) {const locationModal = DOMElements.locationModal;const purpose = locationModal.getAttribute('data-purpose');if (purpose === 'filter') {const oldSelectedLocation = getSelectedLocation();setFilterLocation(id);updateLocationIcon(name);showMessage(`Location set to: ${name}`, 'success');const currentViewName = DOMElements.mainContent.dataset.currentView;const currentListingId = DOMElements.mainContent.dataset.currentListingId;const currentProfileIdentifier = DOMElements.mainContent.dataset.currentProfileIdentifier;if (oldSelectedLocation !== id || ['home', 'products', 'services', 'browse-listings', 'search', 'category'].includes(currentViewName)) {if (oldSelectedLocation !== id) {setCachedCombinedListings({data: null, timestamp: 0 });setCachedProducts({data: null, timestamp: 0 });setCachedServices({data: null, timestamp: 0 });} if (currentViewName === 'listing-detail' && currentListingId) {renderView('listing-detail', currentListingId);} else if (currentViewName === 'profile' && currentProfileIdentifier) {renderView('profile', currentProfileIdentifier);} else if (currentViewName === 'category' && DOMElements.mainContent.dataset.currentCategory) {renderView('category', {category: DOMElements.mainContent.dataset.currentCategory });} else if (currentViewName === 'search') {renderView('search');} else {renderView(currentViewName || 'home');} } } else if (purpose === 'add-listing') {DOMElements.listingLocationName.value = name;DOMElements.listingLocationId.value = id;} else if (purpose === 'edit-listing') {DOMElements.editListingLocationName.value = name;DOMElements.editListingLocationId.value = id;} else if (purpose === 'edit-profile') {DOMElements.editProfileLocationName.value = name;DOMElements.editProfileLocationId.value = id;} closeModal(locationModal);} async function fetchCategories() {const cachedData = localStorage.getItem('cachedStaticCategories');if (cachedData) {const parsedData = JSON.parse(cachedData);if (parsedData.version === STATIC_DATA_VERSION) {setCategories(parsedData.data);setCachedStaticCategories(parsedData.data, parsedData.version);console.log('Categories loaded from cache (version ' + STATIC_DATA_VERSION + ')');return parsedData.data;} else {console.log('Cached categories are outdated (version ' + parsedData.version + '), fetching new data.');} } else {console.log('No categories found in cache, fetching new data.');} try {const response = await fetch(`/data/categories.json?v=${STATIC_DATA_VERSION}`);if (!response.ok) {throw new Error('Failed to fetch categories');} const data = await response.json();setCategories(data);setCachedStaticCategories(data, STATIC_DATA_VERSION);return data;} catch (error) {console.error('Error loading categories:', error);setCategories({categories: [] });return {categories: [] };} } async function fetchLocations() {const cachedData = localStorage.getItem('cachedStaticLocations');if (cachedData) {const parsedData = JSON.parse(cachedData);if (parsedData.version === STATIC_DATA_VERSION) {setLocations(parsedData.data);setCachedStaticLocations(parsedData.data, parsedData.version);console.log('Locations loaded from cache (version ' + STATIC_DATA_VERSION + ')');return parsedData.data;} else {console.log('Cached locations are outdated (version ' + parsedData.version + '), fetching new data.');} } else {console.log('No locations found in cache, fetching new data.');} try {const response = await fetch(`/data/locations.json?v=${STATIC_DATA_VERSION}`);if (!response.ok) {throw new Error('Failed to fetch locations');} const data = await response.json();setLocations(data);setCachedStaticLocations(data, STATIC_DATA_VERSION);return data;} catch (error) {console.error('Error loading locations:', error);setLocations({cities: [], campuses: [] });return {cities: [], campuses: [] };} } function getLocationName(locationId) {if (locationId === 'all') {return 'All';} const allLocations = [...locations.cities, ...locations.campuses];const location = allLocations.find(loc => loc.id === locationId);return location ? location.name : 'Unknown Location';} function getSelectedLocation() {const selectedLocation = localStorage.getItem('selectedLocation');return selectedLocation || 'all';} function updateLocationIcon(locationName = '') {if (locationName === 'All' || getSelectedLocation() === 'all') {DOMElements.locationText.style.display = 'inline';DOMElements.locationText.textContent = 'All';} else if (locationName) {DOMElements.locationText.style.display = 'inline';DOMElements.locationText.textContent = locationName;} else {DOMElements.locationText.style.display = 'none';} } function populateCategoryDropdown(dropdownId) {const dropdown = document.getElementById(dropdownId);if (!dropdown) return;while (dropdown.options.length > 1) {dropdown.remove(1);} if (categories && categories.categories) {categories.categories.forEach(category => {const option = document.createElement('option');option.value = category.id;option.textContent = category.name;dropdown.appendChild(option);});} } async function renderLocationLists(searchQuery) {const cityList = DOMElements.cityList;const campusList = DOMElements.campusList;cityList.innerHTML = '';campusList.innerHTML = '';locations.cities .filter(city => city.name.toLowerCase().includes(searchQuery.toLowerCase())) .slice(0, 5) .forEach(city => {const cityElement = document.createElement('div');cityElement.textContent = city.name;cityElement.setAttribute('data-id', city.id);cityElement.classList.add('location-item');cityElement.addEventListener('click', () => selectLocation(city.id, city.name));cityList.appendChild(cityElement);});locations.campuses .filter(campus => campus.name.toLowerCase().includes(searchQuery.toLowerCase())) .slice(0, 5) .forEach(campus => {const campusElement = document.createElement('div');campusElement.textContent = campus.name;campusElement.setAttribute('data-id', campus.id);campusElement.classList.add('location-item');campusElement.addEventListener('click', () => selectLocation(campus.id, campus.name));campusList.appendChild(campusElement);});} function openLocationModal(purpose) {const locationModal = DOMElements.locationModal;const defaultToAllButton = DOMElements.defaultToAllButton;const autoDetectButton = DOMElements.autoDetectLocationButton;locationModal.setAttribute('data-purpose', purpose);if (purpose === 'filter') {defaultToAllButton.style.display = 'block';autoDetectButton.style.display = 'block';} else {defaultToAllButton.style.display = 'none';autoDetectButton.style.display = 'none';} openModal(locationModal);renderLocationLists('');} function openCategoryModal(purpose, currentCategory = '') {const categoryModal = DOMElements.categoryModal;categoryModal.setAttribute('data-purpose', purpose);categoryModal.setAttribute('data-current-category', currentCategory);openModal(categoryModal);renderCategoryList('');categoryModal.addEventListener('click', stopPropagation);} function renderCategoryList(searchQuery) {const categoryList = DOMElements.categoryList;categoryList.innerHTML = '';const purpose = DOMElements.categoryModal.getAttribute('data-purpose');if (purpose === 'select-only' || purpose === 'filter') {const allCategoriesItem = document.createElement('div');allCategoriesItem.className = 'category-item';allCategoriesItem.innerHTML = ` <img src="https: <h3>All Categories</h3> <p>Browse all available categories</p> `;allCategoriesItem.addEventListener('click', () => selectCategory('', 'All Categories'));categoryList.appendChild(allCategoriesItem);} const filteredCategories = categories && categories.categories ? categories.categories.filter(category => category.name.toLowerCase().includes(searchQuery.toLowerCase()) || category.description.toLowerCase().includes(searchQuery.toLowerCase()) ) : [];if (filteredCategories.length === 0 && searchQuery) {categoryList.innerHTML += ` <div style="grid-column: 1 / -1;text-align: center;padding: 20px;color: #7f8c8d;"> No categories found matching your search </div> `;} filteredCategories.forEach(category => {const categoryItem = document.createElement('div');categoryItem.className = 'category-item';categoryItem.innerHTML = ` <img src="${category.image}" alt="${category.name}"> <h3>${category.name}</h3> <p>${category.description}</p> `;categoryItem.addEventListener('click', () => selectCategory(category.id, category.name));categoryList.appendChild(categoryItem);});} function selectCategory(categoryId, categoryName) {const categoryModal = DOMElements.categoryModal;const purpose = categoryModal.getAttribute('data-purpose');if (purpose === 'add-listing') {DOMElements.listingCategory.value = categoryId;} else if (purpose === 'edit-listing') {DOMElements.editListingCategory.value = categoryId;} else if (purpose === 'select-only') {const select = DOMElements.categorySelect;select.value = categoryId;const option = select.options[select.selectedIndex];if (option) option.text = categoryName || 'All Categories';} closeModal(categoryModal);setTimeout(() => {categoryModal.removeEventListener('click', stopPropagation);}, 100);} function stopPropagation(e) {e.stopPropagation();} export {fetchCategories, fetchLocations, getLocationName, getSelectedLocation, updateLocationIcon, populateCategoryDropdown, renderLocationLists, selectLocation, openLocationModal, openCategoryModal, renderCategoryList, selectCategory, stopPropagation, autoSelectLocation };async function loadModals() {const modalFiles = [ '/modals/login-modal.html', '/modals/signup-modal.html', '/modals/add-listing-modal.html', '/modals/contact-modal.html', '/modals/edit-profile-modal.html', '/modals/edit-listing-modal.html', '/modals/location-modal.html', '/modals/otp-modal.html', '/modals/forgot-password-modal.html', '/modals/category-modal.html', '/modals/loading-modal.html', '/modals/terms-modal.html', '/modals/privacy-modal.html', '/modals/share-modal.html', '/modals/full-image-modal.html', '/modals/reset-password-modal.html', '/modals/share-profile-modal.html', '/modals/report-user-modal.html' ];const fetchPromises = modalFiles.map(file => fetch(file).then(res => res.text()));const modalHtmls = await Promise.all(fetchPromises);const modalsContainer = document.createElement('div');modalsContainer.id = 'dynamic-modals-container';modalHtmls.forEach(html => {modalsContainer.innerHTML += html;});document.body.appendChild(modalsContainer);} function openModal(modal) {modal.style.display = 'flex';document.body.style.overflow = 'hidden';} function resetForgotPasswordModal() {DOMElements.forgotPasswordEmail.value = '';} function resetLoginModal() {DOMElements.loginEmail.value = '';DOMElements.loginPassword.value = '';} function resetSignupModal() {DOMElements.signupName.value = '';DOMElements.signupEmail.value = '';DOMElements.signupPassword.value = '';DOMElements.signupConfirmPassword.value = '';updatePasswordStrength('');checkPasswordMatch('', '');} function resetAddListingModal() {DOMElements.listingType.value = '';DOMElements.listingTitle.value = '';DOMElements.listingPrice.value = '';DOMElements.listingLocationName.value = '';DOMElements.listingLocationId.value = '';DOMElements.listingCategory.value = '';DOMElements.listingDescription.value = '';DOMElements.listingImagePreview.innerHTML = '';setUploadedImages([]);} function resetResetPasswordModal() {DOMElements.resetTokenInput.value = '';DOMElements.newPassword.value = '';DOMElements.confirmNewPassword.value = '';updatePasswordStrength('');checkPasswordMatch('', '');} function resetShareProfileModal() {if (DOMElements.shareProfileUrl) {DOMElements.shareProfileUrl.value = '';} } function resetReportUserModal() {if (DOMElements.reportedUserName) {DOMElements.reportedUserName.textContent = '';} if (DOMElements.reportedUserIdInput) {DOMElements.reportedUserIdInput.value = '';} if (DOMElements.reportReason) {DOMElements.reportReason.value = '';} if (DOMElements.reportDescription) {DOMElements.reportDescription.value = '';} } function closeModal(modal) {modal.style.display = 'none';document.body.style.overflow = '';switch (modal.id) {case 'forgot-password-modal': resetForgotPasswordModal();break;case 'login-modal': resetLoginModal();break;case 'signup-modal': resetSignupModal();break;case 'add-listing-modal': resetAddListingModal();break;case 'reset-password-modal': resetResetPasswordModal();break;case 'share-profile-modal': resetShareProfileModal();break;case 'report-user-modal': resetReportUserModal();break;default: break;} } async function openOTPModal(email, signupData = null, otpAlreadySent = false) {const otpModal = DOMElements.otpModal;if (!DOMElements.otpEmail) {console.error('Element with id "otp-email" not found.');return;} try {DOMElements.otpEmail.textContent = email;openModal(otpModal);resetOTPInputs();DOMElements.otpError.style.display = 'none';startResendTimer();if (signupData) {otpModal.setAttribute('data-signup-data', JSON.stringify(signupData));} else {otpModal.removeAttribute('data-signup-data');} } catch (error) {console.error('Error opening OTP modal:', error);showMessage('Error opening OTP verification. Please try again.', 'error');} finally {} } function resetOTPInputs() {DOMElements.otpInputs.forEach(input => {input.value = '';input.classList.remove('error');});DOMElements.otpInputs[0].focus();} function startResendTimer() {let timeLeft = 30;const resendBtn = DOMElements.resendOtpBtn;const timerText = DOMElements.resendTimer;const resendText = DOMElements.resendText;if (!resendBtn || !timerText || !resendText) {console.error("Required elements not found.");return;} resendText.style.display = "inline";timerText.style.display = "inline";timerText.textContent = timeLeft;resendBtn.disabled = true;setResendTimer(setInterval(() => {timeLeft--;timerText.textContent = timeLeft;if (timeLeft <= 0) {clearInterval(resendTimer);resendBtn.disabled = false;resendText.textContent = "Resend OTP";timerText.style.display = "none";} }, 1000));} function handleOTPInput(e) {const input = e.target;let value = input.value;value = value.replace(/[^0-9]/g, '');if (value.length > 1) {value = value.slice(0, 1);} input.value = value;const nextInput = input.getAttribute('data-next');const previousInput = input.getAttribute('data-previous');if (value.length === 1 && nextInput) {document.getElementById(nextInput).focus();} if (e.key === 'Backspace' && value.length === 0 && previousInput) {document.getElementById(previousInput).focus();} const otp = Array.from(DOMElements.otpInputs).map(otpInput => otpInput.value).join('');if (otp.length === 4) {closeModal(DOMElements.signupModal);verifyOTP(otp);} } async function verifyOTP(otp) {try {const forgotPasswordModal = DOMElements.forgotPasswordModal;const otpModal = DOMElements.otpModal;const email = DOMElements.otpEmail.textContent;const isSignupFlow = otpModal.getAttribute('data-signup-data') !== null;showLoadingDialog();const result = await userAPI.verifyOTP(email, otp, isSignupFlow);if (result.success) {closeModal(otpModal);clearInterval(resendTimer);closeModal(forgotPasswordModal);if (isSignupFlow) {setCurrentUser(result.user);localStorage.setItem('userToken', result.token);updateAuthUI();showMessage('Email verified and account created!', 'success');renderView('profile', result.user._id);closeModal(DOMElements.signupModal);} else {const resetToken = result.resetToken;if (resetToken) {showMessage('OTP verified. Please set your new password.', 'success');openModal(DOMElements.resetPasswordModal);DOMElements.resetTokenInput.value = resetToken;updatePasswordStrength(DOMElements.newPassword.value);checkPasswordMatch(DOMElements.newPassword.value, DOMElements.confirmNewPassword.value, DOMElements.newPasswordMatchFeedback);DOMElements.newPassword.addEventListener('input', () => {updatePasswordStrength(DOMElements.newPassword.value);checkPasswordMatch(DOMElements.newPassword.value, DOMElements.confirmNewPassword.value, DOMElements.newPasswordMatchFeedback);});DOMElements.confirmNewPassword.addEventListener('input', () => {checkPasswordMatch(DOMElements.newPassword.value, DOMElements.confirmNewPassword.value, DOMElements.newPasswordMatchFeedback);});DOMElements.resetPasswordForm.onsubmit = async (e) => {e.preventDefault();const newPassword = DOMElements.newPassword.value;const confirmNewPassword = DOMElements.confirmNewPassword.value;const token = DOMElements.resetTokenInput.value;if (newPassword !== confirmNewPassword) {showMessage('Passwords do not match', 'error');return;} const {strength } = updatePasswordStrength(newPassword);if (strength < 3) {showMessage('Password is too weak. Please make it stronger.', 'error');return;} showLoadingDialog();try {await userAPI.resetPassword(token, newPassword);showMessage('Password reset successfully! You can now log in with your new password.', 'success');closeModal(DOMElements.resetPasswordModal);openModal(DOMElements.loginModal);} catch (error) {console.error('Reset password error:', error);showMessage(error.message || 'Failed to reset password', 'error');} finally {hideLoadingDialog();} };} else {showMessage('OTP verified, but no reset token received. Please try again.', 'error');} } } } catch (error) {console.error('OTP verification error:', error);if (error.message == "Invalid or expired OTP. Please request a new one.") {DOMElements.otpInputs.forEach(input => {input.classList.add('error');void input.offsetWidth;});DOMElements.otpError.style.display = 'block';DOMElements.otpError.textContent = `Error: Invalid OTP`;setOtpTimer(setTimeout(() => {resetOTPInputs();DOMElements.otpError.style.display = 'none';}, 3000));} } finally {hideLoadingDialog();} } let currentUser = null;let currentView = 'home';let uploadedImages = [];let currentSortBy = 'recommended';let filterLocation = localStorage.getItem('selectedLocation') || 'all';let currentCategory = '';let currentListing = null;let categories = {};let locations = {};let otpTimer;let resendTimer;let currentActiveRenderId = null;let cachedProducts = {data: null, timestamp: 0 };let cachedServices = {data: null, timestamp: 0 };let cachedCombinedListings = {data: null, timestamp: 0 };let cachedUserListings = {data: null, timestamp: 0 };let cachedUserFavorites = {data: null, timestamp: 0 };let cachedUserProfile = {};let cachedListingDetails = {};let cachedStaticCategories = {data: null, version: null };let cachedStaticLocations = {data: null, version: null };const CACHE_DURATION = 5 * 60 * 1000;currentUser, currentView, uploadedImages, currentSortBy, filterLocation, currentCategory, currentListing, categories, locations, otpTimer, resendTimer, currentActiveRenderId, cachedProducts, cachedServices, cachedCombinedListings, cachedUserListings, cachedUserFavorites, cachedUserProfile, cachedListingDetails, cachedStaticCategories, cachedStaticLocations, CACHE_DURATION, };currentUser = user;} currentView = view;} uploadedImages = images;} uploadedImages.push(image);} uploadedImages.splice(index, 1);} currentSortBy = sortBy;} filterLocation = location;localStorage.setItem('selectedLocation', location);} currentCategory = category;} currentListing = listing;} categories = data;} locations = data;} otpTimer = timer;} resendTimer = timer;} currentActiveRenderId = id;} cachedProducts = {data, timestamp: Date.now() };} cachedServices = {data, timestamp: Date.now() };} cachedCombinedListings = {data, timestamp: Date.now() };} cachedUserListings = {data, timestamp: Date.now() };} cachedUserFavorites = {data, timestamp: Date.now() };} cachedUserProfile[identifier] = {data, timestamp: Date.now() };} cachedListingDetails[identifier] = {data, timestamp: Date.now() };} cachedStaticCategories = {data, version };localStorage.setItem('cachedStaticCategories', JSON.stringify({data, version }));} cachedStaticLocations = {data, version };localStorage.setItem('cachedStaticLocations', JSON.stringify({data, version }));} const failedFetchDisplay = ` <div class="not-found-container" style="background: transparent;box-shadow: none;"> <div class="not-found-content"> <i class="fas fa-exclamation-triangle not-found-icon"></i> <h2 class="not-found-title">Oops! Something Went Wrong</h2> <p class="not-found-message">Something went wrong while loading this page. Please try again later.</p> <button class="btn-primary" id="retry-fetch-btn"> <i class="fas fa-sync-alt"></i> Retry </button> </div> </div> `;function formatDescriptionForDisplay(text) {if (!text) return '';let formattedText = text .replace(/&/g, '&amp;') .replace(/</g, '&lt;') .replace(/>/g, '&gt;') .replace(/"/g, '&quot;') .replace(/'/g, '&#039;');formattedText = formattedText.replace(/\*(.*?)\*/g, '<strong>$1</strong>');formattedText = formattedText.replace(/_(.*?)_/g, '<em>$1</em>');formattedText = formattedText.replace(/~(.*?)~/g, '<del>$1</del>');return formattedText;} function showMessage(message, type) {const toast = document.createElement('div');toast.className = `toast ${type}`;toast.textContent = message;let toastContainer = document.getElementById('toast-container');if (!toastContainer) {toastContainer = document.createElement('div');toastContainer.id = 'toast-container';toastContainer.style.position = 'fixed';toastContainer.style.bottom = '20px';toastContainer.style.right = '20px';toastContainer.style.display = 'flex';toastContainer.style.flexDirection = 'column-reverse';toastContainer.style.gap = '10px';toastContainer.style.zIndex = '1002';document.body.appendChild(toastContainer);} if (toastContainer.children.length >= 3) {toastContainer.removeChild(toastContainer.children[0]);} toastContainer.appendChild(toast);setTimeout(() => {toast.remove();if (toastContainer.children.length === 0) {toastContainer.remove();} }, 3000);} function showLoadingDialog() {DOMElements.loadingModal.style.display = 'flex';} function hideLoadingDialog() {DOMElements.loadingModal.style.display = 'none';} function createSkeletonCards() {const viewportWidth = window.innerWidth;let cardsPerRow;if (viewportWidth >= 1100) {cardsPerRow = 4;} else if (viewportWidth >= 830) {cardsPerRow = 3;} else {cardsPerRow = 2;} let skeletons = '';for (let i = 0;i < cardsPerRow;i++) {skeletons += ` <div class="skeleton-card"> <div class="skeleton-image"></div> <div class="skeleton-content"> <div class="skeleton-title"></div> <div class="skeleton-price"></div> <div class="skeleton-meta"></div> <div class="skeleton-actions"> <div class="skeleton-button"></div> <div class="skeleton-button"></div> </div> </div> </div> `;} return skeletons;} function renderImagePreviews() {const imagePreview = DOMElements.listingImagePreview;imagePreview.innerHTML = '';uploadedImages.forEach((image, index) => {imagePreview.innerHTML += ` <div class="image-preview-item"> <img src="${image}" alt="Preview ${index + 1}" style="width: 80px;height: 80px;object-fit: cover;border-radius: 8px;"> <span class="remove" data-index="${index}">&times;</span> </div> `;});document.querySelectorAll('.image-preview-item .remove').forEach(button => {button.addEventListener('click', (e) => {e.stopPropagation();const index = button.getAttribute('data-index');removeUploadedImage(index);renderImagePreviews();});});} async function renderEditListingImagePreviews(images) {const editImagePreview = DOMElements.editImagePreview;editImagePreview.innerHTML = '';if (images && images.length > 0) {images.forEach((image, index) => {editImagePreview.innerHTML += ` <div class="image-preview-item"> <img src="${image}" alt="Preview ${index + 1}" style="width: 80px;height: 80px;object-fit: cover;border-radius: 8px;"> <span class="remove" data-index="${index}">&times;</span> </div> `;});document.querySelectorAll('.image-preview-item .remove').forEach(button => {button.addEventListener('click', (e) => {e.stopPropagation();const index = button.getAttribute('data-index');images.splice(index, 1);renderEditListingImagePreviews(images);});});} } function openFullImage(imageUrl) {const fullImageView = DOMElements.fullImageView;const fullImage = DOMElements.fullImage;if (!fullImageView || !fullImage) {console.error('Full image view elements not found in DOM. Ensure full-image-modal.html is loaded.');return;} fullImage.src = imageUrl;fullImageView.style.display = 'flex';document.body.style.overflow = 'hidden';} function closeFullImage() {const fullImageView = DOMElements.fullImageView;if (!fullImageView) {console.error('Full image view element not found in DOM for closing.');return;} fullImageView.style.display = 'none';document.body.style.overflow = '';} function normalize(value, max) {return value / max;} function calculateScore(listing, maxLikes, maxDate) {const likesScore = normalize(listing.likesCount || 0, maxLikes) * 0.5;const dateScore = normalize(new Date(listing.createdAt).getTime(), maxDate) * 0.5;return likesScore + dateScore;} function sortListings(listings, sortBy) {let sortedListings = [...listings];switch (sortBy) {case 'recommended': const maxLikes = Math.max(...sortedListings.map(item => item.likesCount || 0), 1);const maxDate = Math.max(...sortedListings.map(item => new Date(item.createdAt).getTime()), 1);sortedListings.forEach(item => {item.score = calculateScore(item, maxLikes, maxDate);});sortedListings.sort((a, b) => b.score - a.score);break;case 'latest': sortedListings.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));break;case 'name': sortedListings.sort((a, b) => a.title.localeCompare(b.title));break;case 'price-low-to-high': sortedListings.sort((a, b) => a.price - b.price);break;case 'price-high-to-low': sortedListings.sort((a, b) => b.price - a.price);break;default: break;} return sortedListings;} function closeAllDropdowns() {document.querySelectorAll('.dropdown-content').forEach(dropdown => {dropdown.style.display = 'none';});if (DOMElements.guestDropdown) DOMElements.guestDropdown.style.display = 'none';} function updateActiveNavTab() {document.querySelectorAll('nav ul li a').forEach(link => {link.classList.remove('active');});if (DOMElements.mainContent.dataset.currentView === 'listing-detail') {if (DOMElements.mainContent.dataset.currentListingType) {if (DOMElements.mainContent.dataset.currentListingType === 'product') {DOMElements.productsLink.classList.add('active');} else if (DOMElements.mainContent.dataset.currentListingType === 'service') {DOMElements.servicesLink.classList.add('active');} } } else if (DOMElements.mainContent.dataset.currentView === 'search') {const searchType = DOMElements.searchInput.getAttribute('data-search-type');switch (searchType) {case 'products': DOMElements.productsLink.classList.add('active');break;case 'services': DOMElements.servicesLink.classList.add('active');break;case 'all': default: DOMElements.homeLink.classList.add('active');break;} } else {DOMElements.searchInput.placeholder = 'What are you looking for?';DOMElements.searchInput.setAttribute('data-search-type', 'all');switch (DOMElements.mainContent.dataset.currentView) {case 'home': DOMElements.homeLink.classList.add('active');break;case 'products': DOMElements.productsLink.classList.add('active');break;case 'services': DOMElements.servicesLink.classList.add('active');break;case 'about': DOMElements.aboutLink.classList.add('active');break;case 'contact': DOMElements.contactLink.classList.add('active');break;case 'profile': case 'browse-listings': case 'dashboard': case 'favorites': case 'settings': default: break;} } } function validatePassword(password) {const requirements = {length: password.length >= 8, uppercase: /[A-Z]/.test(password), lowercase: /[a-z]/.test(password), number: /\d/.test(password), special: /[!@#$%^&*(),.?":{}|<>]/.test(password) };const strength = Object.values(requirements).filter(Boolean).length;return {requirements, strength };} function updatePasswordStrength(password, passwordInputId) {let strengthBar;let requirementsElements;const passwordInput = document.getElementById(passwordInputId);if (!passwordInput) return;const formGroup = passwordInput.closest('.form-group');if (formGroup) {strengthBar = formGroup.querySelector('.password-strength-meter .strength-bar');requirementsElements = formGroup.querySelectorAll('.password-requirements .requirement');} if (!strengthBar || !requirementsElements) return;const {requirements, strength } = validatePassword(password);const strengthPercent = (strength / 5) * 100;let strengthColor = '#e74c3c';if (strength >= 4) {strengthColor = '#2ecc71';} else if (strength >= 2) {strengthColor = '#f39c12';} strengthBar.style.width = `${strengthPercent}%`;strengthBar.style.backgroundColor = strengthColor;Object.entries(requirements).forEach(([key, isValid]) => {const requirementElement = Array.from(requirementsElements).find(el => el.getAttribute('data-requirement') === key);if (requirementElement) {requirementElement.classList.toggle('valid', isValid);requirementElement.classList.toggle('invalid', !isValid);} });} function checkPasswordMatch(password, confirmPassword, feedbackElement) {if (!feedbackElement) return false;if (!password || !confirmPassword) {feedbackElement.style.display = 'none';return false;} feedbackElement.style.display = 'block';if (password === confirmPassword) {feedbackElement.textContent = 'Passwords match';feedbackElement.className = 'valid';return true;} else {feedbackElement.textContent = 'Passwords do not match';feedbackElement.className = 'invalid';return false;} } async function compressImage(file, maxWidth = 800, quality = 0.7) {return new Promise((resolve) => {const reader = new FileReader();reader.onload = function(event) {const img = new Image();img.onload = function() {const canvas = document.createElement('canvas');const ctx = canvas.getContext('2d');let width = img.width;let height = img.height;if (width > maxWidth) {height = Math.round((height * maxWidth) / width);width = maxWidth;} canvas.width = width;canvas.height = height;ctx.drawImage(img, 0, 0, width, height);canvas.toBlob( (blob) => resolve(blob), 'image/jpeg', quality );};img.src = event.target.result;};reader.readAsDataURL(file);});} function getTimeAgo(dateString) {const now = new Date();const date = new Date(dateString);const seconds = Math.floor((now - date) / 1000);let interval = Math.floor(seconds / 31536000);if (interval >= 1) return interval === 1 ? `${interval} year ago` : `${interval} years ago`;interval = Math.floor(seconds / 2592000);if (interval >= 1) return interval === 1 ? `${interval} month ago` : `${interval} months ago`;interval = Math.floor(seconds / 604800);if (interval >= 1) return interval === 1 ? `${interval} week ago` : `${interval} weeks ago`;interval = Math.floor(seconds / 86400);if (interval >= 1) return interval === 1 ? `${interval} day ago` : `${interval} days ago`;interval = Math.floor(seconds / 3600);if (interval >= 1) return interval === 1 ? `${interval} hour ago` : `${interval} hours ago`;interval = Math.floor(seconds / 60);if (interval >= 1) return interval === 1 ? `${interval} minute ago` : `${interval} minutes ago`;return 'just now';} function toggleRequiredAttribute(checkboxId, inputId) {const checkbox = document.getElementById(checkboxId);const input = document.getElementById(inputId);if (!checkbox || !input) return;checkbox.addEventListener('change', () => {if (checkbox.checked) {input.disabled = false;input.setAttribute('required', true);} else {input.disabled = true;input.removeAttribute('required');input.value = '';} });if (checkbox.checked) {input.setAttribute('required', true);} else {input.removeAttribute('required');} } function setupRevealAnimation() {const revealElements = document.querySelectorAll('.listing-card, .user-card, .category-card');const observer = new IntersectionObserver((entries, observer) => {entries.forEach(entry => {if (entry.isIntersecting) {entry.target.classList.add('revealed');observer.unobserve(entry.target);} });}, {threshold: 0.1, rootMargin: '0px 0px -50px 0px' });revealElements.forEach(element => {element.classList.add('reveal-item');observer.observe(element);});} showMessage, showLoadingDialog, hideLoadingDialog, createSkeletonCards, renderImagePreviews, renderEditListingImagePreviews, openFullImage, closeFullImage, sortListings, normalize, calculateScore, closeAllDropdowns, updateActiveNavTab, validatePassword, updatePasswordStrength, checkPasswordMatch, compressImage, getTimeAgo, toggleRequiredAttribute, failedFetchDisplay, formatDescriptionForDisplay, setupRevealAnimation };showLoadingDialog();try {let user;let userIdToFetch = '';if (typeof userOrUserId === 'object' && userOrUserId !== null && userOrUserId._id) {if (userOrUserId.phone && userOrUserId.whatsapp) {user = userOrUserId;} else {userIdToFetch = userOrUserId._id;} } else if (typeof userOrUserId === 'string') {userIdToFetch = userOrUserId;} else {console.error("openContactModal received an invalid user identifier:", userOrUserId);showMessage('Invalid user identifier for contact.', 'error');hideLoadingDialog();return;} if (userIdToFetch) {user = await userAPI.getProfile(userIdToFetch);} if (!user) {showMessage('User not found', 'error');hideLoadingDialog();return;} DOMElements.contactName.textContent = user.displayName;const whatsappBtn = DOMElements.whatsappBtn;if (user.whatsapp) {whatsappBtn.style.display = 'inline-block';whatsappBtn.onclick = () => {let whatsappUrl = `https: if (listing) {const message = `Hi, I'm interested in your ${listing.type} "${listing.title}". Can you tell me more about it? Link: ${window.location.origin}/${listing.type}/${listing.slug}`;whatsappUrl += `?text=${encodeURIComponent(message)}`;} window.open(whatsappUrl, '_blank');};} else {whatsappBtn.style.display = 'none';} const callBtn = DOMElements.callBtn;if (user.phone) {callBtn.style.display = 'inline-block';callBtn.onclick = () => {const telUrl = `tel:${user.phone}`;window.location.href = telUrl;};} else {callBtn.style.display = 'none';} openModal(DOMElements.contactModal);} catch (error) {showMessage(error.message || 'Error loading user data', 'error');} finally {hideLoadingDialog();} } e.preventDefault();const name = DOMElements.contactUsName.value;const email = DOMElements.contactUsEmail.value;const subject = DOMElements.contactUsSubject.value;const message = DOMElements.contactUsMessage.value;const mailtoLink = `mailto:contact@keid.co.zw?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent( `Name: ${name}\nEmail: ${email}\n\nMessage: ${message}` )}`;window.location.href = mailtoLink;DOMElements.contactUsForm.reset();} import {currentUser, setCurrentUser, currentView, setCurrentView, currentSortBy, setCurrentSortBy, filterLocation, currentCategory, setCurrentCategory, currentListing, setCurrentListing, categories, locations, currentActiveRenderId, setCurrentActiveRenderId, cachedProducts, cachedServices, cachedCombinedListings, cachedUserListings, cachedUserFavorites, cachedUserProfile, cachedListingDetails, CACHE_DURATION, setCachedProducts, setCachedServices, setCachedCombinedListings, setCachedUserListings, setCachedUserFavorites, setCachedUserProfile, setCachedListingDetails, } from '../state.js';import {showMessage, updateActiveNavTab, failedFetchDisplay, } from '../utils.js';const tempListingCache = new Map();function updatePageTitle(title) {document.title = title;} function getCategoryNameById(categoryId) {if (!categories || !categories.categories || !categoryId) return 'Category';const category = categories.categories.find(cat => cat.id === categoryId);return category ? category.name : 'Category';} function updateURL(view, params = {}) {let url = '/';switch (view) {case 'home': url = '/';break;case 'products': url = '/products';break;case 'services': url = '/services';break;case 'category': url = `/category/${params.category}`;break;case 'listing-detail': let listingIdentifier = '';if (typeof params === 'object' && params !== null) {listingIdentifier = params.slug || params._id;} else if (typeof params === 'string') {listingIdentifier = params;} if (currentListing && currentListing._id === (params._id || params)) {url = `/${currentListing.type}/${currentListing.slug}`;} else if (listingIdentifier) {url = `/listing/${listingIdentifier}`;} break;case 'profile': if (currentUser && currentUser.slug === params) {url = `/profile/${currentUser.slug}`;} else if (typeof params === 'string') {url = `/profile/${params}`;} break;case 'dashboard': url = '/dashboard';break;case 'favorites': url = '/favorites';break;case 'settings': url = '/settings';break;case 'about': url = '/about';break;case 'contact': url = '/contact';break;case 'search': const query = DOMElements.searchInput.value.trim();const category = DOMElements.categorySelect.value;let searchUrl = `/search?query=${encodeURIComponent(query)}`;if (category) {searchUrl += `&category=${encodeURIComponent(category)}`;} url = searchUrl;break;case 'browse-listings': url = '/browse';break;default: url = '/';} const currentScrollY = window.scrollY;if (window.location.pathname !== url) {history.pushState({view, params, scrollY: currentScrollY }, '', url);} else {history.replaceState({view, params, scrollY: currentScrollY }, '', url);} } function parseURL() {const path = window.location.pathname;const searchParams = new URLSearchParams(window.location.search);const state = history.state;if (state && state.view && state.scrollY !== undefined) {renderView(state.view, state.params, false, state.scrollY);return;} const segments = path.replace(/^\/|\/$/g, '').split('/').map(s => s.toLowerCase());if (segments[0] === '') {return renderView('home');} switch (segments[0]) {case 'products': renderView('products');break;case 'services': renderView('services');break;case 'product': case 'service': case 'listing': if (segments[1]) {renderView('listing-detail', segments[1]);} else {renderView('home');} break;case 'category': if (segments[1]) renderView('category', {category: segments[1] });else renderView('home');break;case 'profile': if (segments[1]) {renderView('profile', segments[1]);} else {currentUser ? renderView('profile', currentUser.slug || currentUser._id) : renderView('home');} break;case 'dashboard': renderView('dashboard');break;case 'favorites': renderView('favorites');break;case 'settings': renderView('settings');break;case 'about': renderView('about');break;case 'contact': renderView('contact');break;case 'search': const query = searchParams.get('query') || '';const category = searchParams.get('category') || '';if (query) DOMElements.searchInput.value = query;if (category) DOMElements.categorySelect.value = category;renderView('search');break;case 'browse': renderView('browse-listings');break;default: renderView('home');} } async function renderView(view, params = {}, scrollToTop = true, initialScrollY = 0) {const thisRenderId = Date.now();setCurrentActiveRenderId(thisRenderId);updateURL(view, params);setCurrentView(view);DOMElements.mainContent.dataset.currentView = view;DOMElements.mainContent.dataset.currentListingId = null;DOMElements.mainContent.dataset.currentListingType = null;DOMElements.mainContent.dataset.currentProfileIdentifier = null;if (view === 'category') {setCurrentCategory(params.category);DOMElements.mainContent.dataset.currentCategory = params.category;} if (view !== 'search') {DOMElements.searchInput.removeAttribute('data-search-type');} updateActiveNavTab();DOMElements.mainContent.innerHTML = ` <div class="not-found-container" style="background-color: transparent;box-shadow: none;"> <div class="page-loading-spinner"></div> </div> `;if (!scrollToTop && initialScrollY !== undefined) {window.scrollTo(0, initialScrollY);} else if (scrollToTop) {window.scrollTo({top: 0 });} try {switch (view) {case 'home': updatePageTitle('Keid List - Local Marketplace');await renderHome(thisRenderId);break;case 'products': updatePageTitle('Products - Keid');await renderProducts({...params, location: filterLocation }, thisRenderId);break;case 'services': updatePageTitle('Services - Keid');await renderServices({...params, location: filterLocation }, thisRenderId);break;case 'category': const categoryName = getCategoryNameById(params.category);updatePageTitle(`${categoryName} - Keid`);await renderCategory(params, thisRenderId);break;case 'search': const query = DOMElements.searchInput.value.trim();updatePageTitle(`${query} - Keid Search`);await handleSearch(thisRenderId);break;case 'listing-detail': await renderListingDetail(params, thisRenderId);break;case 'profile': await renderProfile(params, thisRenderId);break;case 'browse-listings': updatePageTitle('Browse - Keid');await renderBrowseListings(thisRenderId);break;case 'dashboard': updatePageTitle('Dashboard - Keid');await renderDashboard(thisRenderId);break;case 'favorites': updatePageTitle('Saved Listings - Keid');await renderFavorites(thisRenderId);break;case 'settings': updatePageTitle('Settings - Keid');await renderSettings(thisRenderId);break;case 'about': updatePageTitle('About Us - Keid');renderAbout(thisRenderId);break;case 'contact': updatePageTitle('Contact Us - Keid');renderContact(thisRenderId);break;default: updatePageTitle('Keid List - Local Marketplace');await renderHome(thisRenderId);} } catch (error) {if (thisRenderId !== currentActiveRenderId) {console.warn(`Ignoring error for outdated render ID ${thisRenderId}. Current active ID is ${currentActiveRenderId}.`);return;} showMessage(error.message || 'Error loading content', 'error');console.error('Error rendering view:', error);DOMElements.mainContent.innerHTML = ` <div class="error-container"> <div class="not-found-content"> <i class="fas fa-exclamation-triangle not-found-icon"></i> <h2 class="not-found-title">Oops! Something Went Wrong</h2> <p class="not-found-message">Something went wrong while loading this page. Please try again later.</p> <button class="btn-primary" id="go-home-btn"> <i class="fas fa-home"></i> Go Back Home </button> </div> </div> `;document.getElementById('go-home-btn')?.addEventListener('click', () => {renderView('home');});initializeDOMElements();} } renderView, parseURL, updateURL, tempListingCache, updatePageTitle };import {currentUser, currentActiveRenderId, cachedUserProfile, cachedUserListings, cachedUserFavorites, CACHE_DURATION, setCachedUserProfile, setCachedUserListings, setCachedUserFavorites, } from '../state.js';import {showMessage, createSkeletonCards, } from '../utils.js';function isCacheFresh(timestamp) {return (Date.now() - timestamp) < CACHE_DURATION;} if (renderId !== currentActiveRenderId) return;updatePageTitle('Dashboard - Keid');if (!currentUser) {if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = '<p>Please login to access the dashboard</p>';initializeDOMElements();return;} const renderContent = (userProfile, userListings, favorites) => {if (renderId !== currentActiveRenderId) return;tempListingCache.clear();userListings.forEach(listing => tempListingCache.set(listing._id, listing));favorites.forEach(listing => tempListingCache.set(listing._id, listing));const hasListings = userListings && userListings.length > 0;const html = ` <div class="dashboard-container"> <div class="dashboard-sidebar"> <ul class="dashboard-nav"> <li><a href="#" class="active" id="dashboard-tab"><i class="fas fa-tachometer-alt"></i> Overview</a></li> <li><a href="#" id="listings-tab"><i class="fas fa-list"></i> My Listings</a></li> </ul> </div> <div class="dashboard-content"> <div class="dashboard-header"> <h2 class="dashboard-title">Dashboard</h2> <button class="btn-success" id="add-listing-btn">Add Listing</button> </div> <div id="overview-content" class="tab-content active"> <div class="dashboard-stats"> <div class="stat-card"> <div class="stat-value">${userProfile.likesReceived || 0}</div> <div class="stat-label">Total Likes</div> </div> <div class="stat-card"> <div class="stat-value">${userProfile.totalListings || 0}</div> <div class="stat-label">Total Listings</div> </div> <div class="stat-card"> <div class="stat-value">${favorites && favorites.length || 0}</div> <div class="stat-label">Saved Listings</div> </div> <div class="stat-card"> <div class="stat-value">${getMostPopularListing(userListings)}</div> <div class="stat-label">Your Popular Listing</div> </div> </div> </div> <div id="listings-content" class="tab-content"> <h3 class="section-title">My Listings</h3> ${hasListings ? ` <div class="listings-grid"> ${userListings.map(listing => createListingCard(listing, {isDashboard: true, hideListedBy: true })).join('')} </div> ` : ` <div class="not-found-compressed"> <div class="not-found-content"> <i class="fas fa-box-open not-found-icon"></i> <h2 class="not-found-title">No Listings</h2> <p class="not-found-message"> You haven't added any listings yet. </p> </div> </div> `} </div> </div> </div> `;if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = html;initializeDOMElements();document.getElementById('dashboard-tab')?.addEventListener('click', (e) => {e.preventDefault();switchTab('overview-content');});document.getElementById('listings-tab')?.addEventListener('click', (e) => {e.preventDefault();switchTab('listings-content');});document.getElementById('add-listing-btn')?.addEventListener('click', openListingCreator);document.getElementById('add-first-listing-btn')?.addEventListener('click', openListingCreator);addListingCardEventListeners();};const skeletonHtml = ` <div class="dashboard-container"> <div class="dashboard-sidebar"> <ul class="dashboard-nav"> <li><a href="#" class="active"><i class="fas fa-tachometer-alt"></i> Overview</a></li> <li><a href="#"><i class="fas fa-list"></i> My Listings</li> </ul> </div> <div class="dashboard-content"> <div class="dashboard-header"> <h2 class="dashboard-title">Dashboard</h2> <button class="btn-success" id="add-listing-btn">Add Listing</button> </div> <div id="overview-content" class="tab-content active"> <div class="dashboard-stats"> <div class="stat-card"> <div class="skeleton-title" style="width: 70%;height: 36px;margin: 0 auto 5px auto;"></div> <div class="skeleton-meta" style="width: 50%;height: 16px;margin: 0 auto;"></div> </div> <div class="stat-card"> <div class="skeleton-title" style="width: 70%;height: 36px;margin: 0 auto 5px auto;"></div> <div class="skeleton-meta" style="width: 50%;height: 16px;margin: 0 auto;"></div> </div> <div class="stat-card"> <div class="skeleton-title" style="width: 70%;height: 36px;margin: 0 auto 5px auto;"></div> <div class="skeleton-meta" style="width: 50%;height: 16px;margin: 0 auto;"></div> </div> <div class="stat-card"> <div class="skeleton-title" style="width: 70%;height: 36px;margin: 0 auto 5px auto;"></div> <div class="skeleton-meta" style="width: 50%;height: 16px;margin: 0 auto;"></div> </div> </div> </div> <div id="listings-content" class="tab-content"> <h3 class="section-title">My Listings</h3> <div class="listings-grid"> ${createSkeletonCards()} </div> </div> </div> </div> `;if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = skeletonHtml;initializeDOMElements();document.getElementById('add-listing-btn')?.addEventListener('click', openListingCreator);let userProfile = null;let userListings = [];let favorites = [];let useCached = false;if (isCacheFresh(cachedUserProfile[currentUser.slug]?.timestamp) && cachedUserProfile[currentUser.slug]?.data && isCacheFresh(cachedUserListings.timestamp) && cachedUserListings.data && isCacheFresh(cachedUserFavorites.timestamp) && cachedUserFavorites.data) {userProfile = cachedUserProfile[currentUser.slug].data;userListings = cachedUserListings.data;favorites = cachedUserFavorites.data;useCached = true;renderContent(userProfile, userListings, favorites);} try {const latestUserProfile = await userAPI.getProfile(currentUser.slug);if (renderId !== currentActiveRenderId) return;const latestUserListings = await userAPI.getUserListings(currentUser.slug);if (renderId !== currentActiveRenderId) return;const latestFavorites = await userAPI.getUserFavorites(currentUser._id);if (renderId !== currentActiveRenderId) return;setCachedUserProfile(currentUser.slug, latestUserProfile);setCachedUserListings(latestUserListings);setCachedUserFavorites(latestFavorites);if (!useCached || JSON.stringify(userProfile) !== JSON.stringify(latestUserProfile) || JSON.stringify(userListings) !== JSON.stringify(latestUserListings) || JSON.stringify(favorites) !== JSON.stringify(latestFavorites)) {renderContent(latestUserProfile, latestUserListings, latestFavorites);} } catch (error) {if (renderId !== currentActiveRenderId) return;console.error('Error rendering dashboard:', error);showMessage(error.message || 'Error loading dashboard', 'error');DOMElements.mainContent.innerHTML = failedFetchDisplay;document.getElementById('retry-fetch-btn')?.addEventListener('click', () => {renderView('dashboard');});initializeDOMElements();} } document.querySelectorAll('.tab-content').forEach(tab => {tab.classList.remove('active');});document.getElementById(tabId)?.classList.add('active');document.querySelectorAll('.dashboard-nav a').forEach(tab => {tab.classList.remove('active');});document.querySelector(`.dashboard-nav a[id="${tabId.replace('-content', '-tab')}"]`)?.classList.add('active');} if (!userListings || userListings.length === 0) return 'N/A';const mostPopular = userListings.reduce((prev, current) => (prev.likesCount > current.likesCount) ? prev : current, {likesCount: -1, title: 'N/A' } );return mostPopular.title || 'N/A';} import {currentUser, currentActiveRenderId, cachedUserFavorites, CACHE_DURATION, setCachedUserFavorites, } from '../state.js';import {showMessage, createSkeletonCards, } from '../utils.js';function isCacheFresh(timestamp) {return (Date.now() - timestamp) < CACHE_DURATION;} if (renderId !== currentActiveRenderId) return;updatePageTitle('Saved Listings - Keid');if (!currentUser) {if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = '<p>Please login to view your favorites</p>';initializeDOMElements();return;} const renderContent = async (validListings) => {if (renderId !== currentActiveRenderId) return;tempListingCache.clear();validListings.forEach(listing => tempListingCache.set(listing._id, listing));let listingsGrid = DOMElements.mainContent.querySelector('.listings-grid');if (!listingsGrid) {listingsGrid = document.createElement('div');listingsGrid.className = 'listings-grid';DOMElements.mainContent.appendChild(listingsGrid);} if (validListings && validListings.length > 0) {listingsGrid.innerHTML = validListings.map(listing => createListingCard(listing) ).join('');} else {DOMElements.mainContent.innerHTML = ` <div class="error-container"> <div class="not-found-content"> <i class="fas fa-bookmark not-found-icon"></i> <h2 class="not-found-title">No Saved Listings Yet</h2> <p class="not-found-message">You haven't saved any listings yet.</p> <button class="btn-primary" id="browse-listings-btn"> <i class="fas fa-search"></i> Browse Listings </button> </div> </div> `;} addListingCardEventListeners();document.getElementById('browse-listings-btn')?.addEventListener('click', () => {renderView('home');});};const skeletonHtml = ` <h2 class="section-title">Saved Listings</h2> <div class="listings-grid">${createSkeletonCards()}</div> `;if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = skeletonHtml;initializeDOMElements();let favorites = [];let validListings = [];let useCached = false;if (isCacheFresh(cachedUserFavorites.timestamp) && cachedUserFavorites.data) {favorites = cachedUserFavorites.data;useCached = true;renderContent([]);} try {const latestFavorites = await userAPI.getUserFavorites(currentUser._id);if (renderId !== currentActiveRenderId) return;const latestValidListings = latestFavorites;setCachedUserFavorites(latestValidListings);if (!useCached || JSON.stringify(validListings) !== JSON.stringify(latestValidListings)) {await renderContent(latestValidListings);} } catch (error) {if (renderId !== currentActiveRenderId) return;console.error('Error rendering favorites:', error);showMessage('Failed to load favorites. Please try again.', 'error');DOMElements.mainContent.innerHTML = ` <div class="error-container"> <div class="not-found-content"> <i class="fas fa-exclamation-triangle not-found-icon"></i> <p class="not-found-message">Error loading saved listings.</p> </div> <button class="btn-primary retry-favorites-btn"> <i class="fas fa-sync-alt"></i> Try Again </button> </div> `;document.querySelector('.retry-favorites-btn')?.addEventListener('click', () => {renderView('favorites');});initializeDOMElements();} } import {currentUser, currentActiveRenderId, categories, locations, setCachedCombinedListings, cachedCombinedListings, CACHE_DURATION, } from '../state.js';import {showMessage, createSkeletonCards, sortListings, } from '../utils.js';function isCacheFresh(timestamp) {return (Date.now() - timestamp) < CACHE_DURATION;} function getCategoryDataById(categoryId) {if (!categories || !categories.categories || !categoryId) return null;return categories.categories.find(cat => cat.id === categoryId);} let currentSlideIndex = 0;let heroSliderInterval;const SLIDE_INTERVAL_TIME = 5000;function showHeroSlide(index) {const slides = document.querySelectorAll('.hero-slide');if (slides.length === 0) return;if (index >= slides.length) {currentSlideIndex = 0;} else if (index < 0) {currentSlideIndex = slides.length - 1;} else {currentSlideIndex = index;} slides.forEach((slide, i) => {if (i === currentSlideIndex) {slide.classList.add('active');} else {slide.classList.remove('active');} });} function startHeroSlider() {clearInterval(heroSliderInterval);heroSliderInterval = setInterval(() => {showHeroSlide(currentSlideIndex + 1);}, SLIDE_INTERVAL_TIME);} function initializeHeroSlider() {const heroSliderContainer = document.querySelector('.hero-slider');const slides = document.querySelectorAll('.hero-slide');if (!heroSliderContainer || slides.length === 0) {return;} showHeroSlide(currentSlideIndex);startHeroSlider();} if (renderId !== currentActiveRenderId) return;updatePageTitle('Keid List - Local Marketplace');DOMElements.searchInput.placeholder = 'What are you looking for?';DOMElements.searchInput.setAttribute('data-search-type', 'all');const selectedLocation = getSelectedLocation();const renderContent = (data) => {if (renderId !== currentActiveRenderId) return;const {featuredListings, recentlyAddedListings, topListers, trendingCategoriesData } = data;tempListingCache.clear();[...featuredListings, ...recentlyAddedListings, ...trendingCategoriesData.flatMap(c => c.listings)].forEach(listing => {tempListingCache.set(listing._id, listing);});const noListingsMessage = (sectionName) => ` <div class="error-container" style="background-color: transparent;box-shadow: none;"> <div class="not-found-content"> <i class="fas fa-box-open not-found-icon"></i> <h2 class="not-found-title">No ${sectionName} Yet</h2> <p class="not-found-message">There are currently no ${sectionName.toLowerCase()} available in the selected location.</p> </div> </div> `;initializeHeroSlider();const recentlyAddedSection = DOMElements.mainContent.querySelector('#recently-added-section .horizontal-scroll-container');if (recentlyAddedSection) {recentlyAddedSection.innerHTML = recentlyAddedListings && recentlyAddedListings.length > 0 ? recentlyAddedListings.map(listing => createListingCard(listing)).join('') : noListingsMessage('Recently Added Listings');} const featuredListingsSection = DOMElements.mainContent.querySelector('#popular-listings-section .listings-grid');if (featuredListingsSection) {featuredListingsSection.innerHTML = featuredListings && featuredListings.length > 0 ? featuredListings.map(listing => createListingCard(listing)).join('') : noListingsMessage('Popular Listings');} const viewAllFeaturedBtn = document.querySelector('.view-all-popular-btn');if (viewAllFeaturedBtn) {viewAllFeaturedBtn.addEventListener('click', () => {renderView('browse-listings');});} const topListersSection = DOMElements.mainContent.querySelector('#top-listers-section .horizontal-scroll-container');if (topListersSection) {topListersSection.innerHTML = topListers && topListers.length > 0 ? topListers.map(user => createUserCard(user)).join('') : noListingsMessage('Top Sellers & Service Providers');} const categorySpotlightContainer = DOMElements.mainContent.querySelector('#category-spotlight-container');if (categorySpotlightContainer) {categorySpotlightContainer.innerHTML = '';if (trendingCategoriesData && trendingCategoriesData.length > 0) {trendingCategoriesData.forEach(catData => {if (catData.listings.length > 0) {const category = getCategoryDataById(catData.categoryId);const categoryName = category?.name || 'Category';const categoryDescription = category?.description || '';const categorySectionHtml = ` <div class="section category-spotlight-section"> <h2 class="section-title">Explore ${categoryName}</h2> <p class="section-subtitle">${categoryDescription}</p> <div class="listings-grid"> ${catData.listings.map(listing => createListingCard(listing)).join('')} </div> <div style="text-align: center;margin-top: 20px;margin-bottom: 30px;"> <button class="btn-primary view-all-category-btn" data-category-id="${catData.categoryId}">View All ${categoryName}</button> </div> </div> `;categorySpotlightContainer.insertAdjacentHTML('beforeend', categorySectionHtml);} });} } document.querySelectorAll('.hero-browse-btn').forEach(btn => {btn.addEventListener('click', () => {renderView('browse-listings');});});if (currentUser) {document.querySelectorAll('.hero-add-listing-btn').forEach(btn => {btn.addEventListener('click', openListingCreator);});document.getElementById('cta-add-listing-btn')?.addEventListener('click', openListingCreator);} else {document.querySelectorAll('.hero-signup-btn').forEach(btn => {btn.addEventListener('click', () => openModal(DOMElements.signupModal));});document.getElementById('cta-add-listing-btn')?.addEventListener('click', () => openModal(DOMElements.signupModal));} if (categories && categories.categories) {categories.categories.forEach(category => {document.getElementById(`category-${category.id}`)?.addEventListener('click', () => {renderView('category', {category: category.id });});});} document.querySelectorAll('.view-all-category-btn').forEach(button => {button.addEventListener('click', (e) => {const categoryId = e.target.dataset.categoryId;renderView('category', {category: categoryId });});});addListingCardEventListeners();};const categoryCardsHtml = (categories && categories.categories) ? categories.categories.map(category => ` <div class="category-card" id="category-${category.id}"> <div style="height: 150px;background-image: url('${category.image}');background-size: cover;"></div> <h3>${category.name}</h3> <p>${category.description}</p> </div> `).join('') : '';const skeletonHtml = ` <!-- Hero Section --> <div class="hero"> <div class="hero-slider"> <div class="hero-slide active" style="background-image: url('https: <div class="hero-content"> <h1>Find Local Products & Services</h1> <p>Connect with trusted local businesses and service providers in your area.</p> <div class="hero-buttons"> <button class="btn-primary hero-browse-btn">Browse Listings</button> ${currentUser ? `<button class="btn-success hero-add-listing-btn">Add Your Listing</button>` : `<button class="btn-success hero-signup-btn">Join Now</button>`} </div> </div> </div> <div class="hero-slide" style="background-image: url('https: <div class="hero-content"> <h1>Discover Unique Local Gems</h1> <p>Support your community by exploring products and services nearby.</p> <div class="hero-buttons"> <button class="btn-primary hero-browse-btn">Explore Now</button> ${currentUser ? `<button class="btn-success hero-add-listing-btn">List Your Item</button>` : `<button class="btn-success hero-signup-btn">Get Started</button>`} </div> </div> </div> <div class="hero-slide" style="background-image: url('https: <div class="hero-content"> <h1>Your Local Marketplace</h1> <p>Buy, sell, and connect with people right in your neighborhood.</p> <div class="hero-buttons"> <button class="btn-primary hero-browse-btn">Find Deals</button> ${currentUser ? `<button class="btn-success hero-add-listing-btn">Post an Ad</button>` : `<button class="btn-success hero-signup-btn">Sign Up Today</button>`} </div> </div> </div> </div> <!-- Removed <div class="hero-dots"></div> --> </div> <!-- Category Section --> <div class="category-section"> <h2 class="section-title">Browse Categories</h2> <div class="category-scroll"> ${categoryCardsHtml} </div> <!-- Recently Added Listings --> <div class="section" id="recently-added-section"> <h2 class="section-title">Recently Added</h2> <div class="horizontal-scroll-container listings-grid-scroll"> ${createSkeletonCards()} ${createSkeletonCards()} </div> </div> <!-- Popular Listings --> <div class="section" id="popular-listings-section"> <h2 class="section-title">Popular Listings</h2> <div class="listings-grid"> ${createSkeletonCards()} </div> <div style="text-align: center;margin-top: 20px;margin-bottom: 30px;"> <button class="btn-primary view-all-popular-btn">View All Popular Listings</button> </div> </div> <!-- Top Sellers & Service Providers --> <div class="section" id="top-listers-section"> <h2 class="section-title">Top Sellers & Service Providers</h2> <div class="horizontal-scroll-container user-cards-scroll"> ${Array(5).fill(0).map(() => ` <div class="user-card skeleton-card"> <div class="user-card-avatar skeleton-image" style="width: 80px;height: 80px;border-radius: 50%;"></div> <div class="user-card-name skeleton-title" style="width: 80%;height: 20px;"></div> <div class="user-card-stats skeleton-meta" style="width: 60%;height: 12px;"></div> <div class="skeleton-button" style="width: 100%;height: 30px;"></div> </div> `).join('')} </div> <!-- Trending Category Container --> <div id="category-spotlight-container"> </div> <!-- Call to Action --> <div class="call-to-action" > <h2 style="margin-bottom: 20px;font-size: 18px;">Have Something to Offer?</h2> <p>List your products or services on Keid and connect with customers in your area.</p> <button class="btn-success" style="padding: 12px 24px;" id="cta-add-listing-btn">${currentUser ? 'Add Your Listing' : 'Sign Up to Get Started'}</button> </div> `;if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = skeletonHtml;initializeDOMElements();initializeHeroSlider();let dataToRender = {featuredListings: [], recentlyAddedListings: [], topListers: [], trendingCategoriesData: [] };let useCached = false;if (isCacheFresh(cachedCombinedListings.timestamp) && cachedCombinedListings.data) {if (cachedCombinedListings.data.featuredListings && cachedCombinedListings.data.recentlyAddedListings && cachedCombinedListings.data.products && cachedCombinedListings.data.services) {dataToRender = cachedCombinedListings.data;useCached = true;renderContent(dataToRender);} else {console.warn("Cached combined listings data is outdated or malformed, skipping initial render with cache.");} } try {const allListings = await listingAPI.getAllListings(null, null, selectedLocation);if (renderId !== currentActiveRenderId) return;let filteredListings = allListings;if (selectedLocation === 'all') {filteredListings = filteredListings.filter(item => locations.cities.some(city => city.id === item.location) || locations.campuses.some(campus => campus.id === item.location) );} const products = filteredListings.filter(l => l.type === 'product');const services = filteredListings.filter(l => l.type === 'service');const recentlyAddedListings = sortListings(filteredListings, 'latest').slice(0, 6);const featuredListings = sortListings(filteredListings, 'recommended').slice(0, 8);const userParams = {sortBy: 'likesReceived', sortOrder: 'desc', limit: 10, };if (selectedLocation !== 'all') {userParams.location = selectedLocation;} const topListerProfiles = await userAPI.getUsers(userParams);const topListers = topListerProfiles .filter(user => user !== null) .sort((a, b) => {const likesReceivedA = a.likesReceived || 0;const likesReceivedB = b.likesReceived || 0;if (likesReceivedA !== likesReceivedB) {return likesReceivedB - likesReceivedA;} const followerCountA = a.followersCount || 0;const followerCountB = b.followersCount || 0;if (followerCountA !== followerCountB) {return followerCountB - followerCountA;} const totalListingsA = a.totalListings || 0;const totalListingsB = b.totalListings || 0;return totalListingsB - totalListingsA;}) .slice(0, 5);const allCategoryIds = categories.categories ? categories.categories.map(c => c.id) : [];const randomCategoryIds = [];let availableCategoryIds = [...allCategoryIds];while (randomCategoryIds.length < 2 && availableCategoryIds.length > 0) {const randomIndex = Math.floor(Math.random() * availableCategoryIds.length);const categoryId = availableCategoryIds.splice(randomIndex, 1)[0];randomCategoryIds.push(categoryId);} const trendingCategoriesData = randomCategoryIds.map(categoryId => {const categoryListings = filteredListings.filter(listing => listing.category === categoryId);const sortedCategoryListings = sortListings(categoryListings, 'recommended').slice(0, 4);return {categoryId, listings: sortedCategoryListings };});const latestData = {products: products, services: services, featuredListings, recentlyAddedListings, topListers, trendingCategoriesData };setCachedCombinedListings(latestData);if (!useCached || JSON.stringify(dataToRender) !== JSON.stringify(latestData)) {renderContent(latestData);} } catch (error) {if (renderId !== currentActiveRenderId) return;console.error('Error rendering home:', error);showMessage(error.message || 'Error loading home page', 'error');const loadingSections = DOMElements.mainContent.querySelectorAll('.listings-grid, .horizontal-scroll-container');loadingSections.forEach(section => {section.innerHTML = ` <div class="error-container" style="height: fit-content;"> <div class="not-found-content"> <p class="not-found-message">Failed to load content.</p> </div> <button class="btn-primary retry-home-btn">Try Again</button> </div> `;});document.querySelectorAll('.retry-home-btn').forEach(btn => {btn.addEventListener('click', () => renderView('home'));});initializeDOMElements();} } import {currentUser, currentListing, setCurrentListing, categories, currentActiveRenderId, cachedListingDetails, cachedUserProfile, CACHE_DURATION, setCachedListingDetails, setCachedUserProfile, } from '../state.js';import {showMessage, openFullImage, closeFullImage, updateActiveNavTab, getTimeAgo, formatDescriptionForDisplay, } from '../utils.js';function isCacheFresh(timestamp) {return (Date.now() - timestamp) < CACHE_DURATION;} if (!currentListing) return;let ogTitle = document.querySelector('meta[property="og:title"]');let description = document.querySelector('meta[property="og:description"]');let image = document.querySelector('meta[property="og:image"]');let url = document.querySelector('meta[property="og:url"]');let type = document.querySelector('meta[property="og:type"]');if (!ogTitle) {ogTitle = document.createElement('meta');ogTitle.setAttribute('property', 'og:title');document.head.appendChild(ogTitle);} if (!description) {description = document.createElement('meta');description.setAttribute('property', 'og:description');document.head.appendChild(description);} if (!image) {image = document.createElement('meta');image.setAttribute('property', 'og:image');document.head.appendChild(image);} if (!url) {url = document.createElement('meta');url.setAttribute('property', 'og:url');document.head.appendChild(url);} if (!type) {type = document.createElement('meta');type.setAttribute('property', 'og:type');document.head.appendChild(type);} ogTitle.setAttribute('content', currentListing.title);description.setAttribute('content', currentListing.description.substring(0, 200) + (currentListing.description.length > 200 ? '...' : ''));image.setAttribute('content', currentListing.images[0]);url.setAttribute('content', `${window.location.origin}/${currentListing.type}/${currentListing.slug}`);type.setAttribute('content', 'product');let twitterCard = document.querySelector('meta[name="twitter:card"]');let twitterTitle = document.querySelector('meta[name="twitter:title"]');let twitterDescription = document.querySelector('meta[name="twitter:description"]');let twitterImage = document.querySelector('meta[name="twitter:image"]');if (!twitterCard) {twitterCard = document.createElement('meta');twitterCard.setAttribute('name', 'twitter:card');document.head.appendChild(twitterCard);} if (!twitterTitle) {twitterTitle = document.createElement('meta');twitterTitle.setAttribute('name', 'twitter:title');document.head.appendChild(twitterTitle);} if (!twitterDescription) {twitterDescription = document.createElement('meta');twitterDescription.setAttribute('name', 'twitter:description');document.head.appendChild(twitterDescription);} if (!twitterImage) {twitterImage = document.createElement('meta');twitterImage.setAttribute('name', 'twitter:image');document.head.appendChild(twitterImage);} twitterCard.setAttribute('content', 'summary_large_image');twitterTitle.setAttribute('content', currentListing.title);twitterDescription.setAttribute('content', currentListing.description.substring(0, 200) + (currentListing.description.length > 200 ? '...' : '') );twitterImage.setAttribute('content', currentListing.images[0]);} if (renderId !== currentActiveRenderId) return;let listing = null;let owner = null;let actualIdentifier = '';if (typeof identifierOrListingObject === 'object' && identifierOrListingObject !== null) {listing = identifierOrListingObject;actualIdentifier = listing.slug || listing._id;owner = listing.userId;} else {actualIdentifier = identifierOrListingObject;if (cachedListingDetails[actualIdentifier] && isCacheFresh(cachedListingDetails[actualIdentifier].timestamp)) {listing = cachedListingDetails[actualIdentifier].data;if (cachedUserProfile[listing.userId.slug || listing.userId._id] && isCacheFresh(cachedUserProfile[listing.userId.slug || listing.userId._id].timestamp)) {owner = cachedUserProfile[listing.userId.slug || listing.userId._id].data;} } } const renderContent = async (listingToRender, ownerToRender) => {if (renderId !== currentActiveRenderId) return;setCurrentListing(listingToRender);DOMElements.mainContent.dataset.currentListingId = listingToRender._id;DOMElements.mainContent.dataset.currentListingType = listingToRender.type;updatePageTitle(`${listingToRender.title} - Keid`);const formattedCategory = categories[listingToRender.category]?.name || listingToRender.category .split('-') .map(word => word.charAt(0).toUpperCase() + word.slice(1)) .join(' ');const isOwnListing = currentUser && currentUser._id === listingToRender.userId._id;const isLiked = listingToRender.isLiked || false;const isFavorited = listingToRender.isFavorited || false;const html = ` <div class="detail-container"> <div class="detail-card image-details-card"> <div class="image-header-container" id="image-slider-container"> <div class="image-slider" id="image-slider"> ${listingToRender.images.map((image, index) => ` <div class="slide" data-index="${index}"> <img src="${image}" alt="${listingToRender.title} - Image ${index + 1}"> </div> `).join('')} </div> <div class="nav-arrow prev-arrow" id="prev-arrow" style="display: ${listingToRender.images.length > 1 ? 'flex' : 'none'}"> <i class="fas fa-chevron-left"></i> </div> <div class="nav-arrow next-arrow" id="next-arrow" style="display: ${listingToRender.images.length > 1 ? 'flex' : 'none'}"> <i class="fas fa-chevron-right"></i> </div> <div class="dots-container" id="dots-container" style="display: ${listingToRender.images.length > 1 ? 'flex' : 'none'}"> ${listingToRender.images.map((_, index) => ` <div class="dot" data-index="${index}"></div> `).join('')} </div> </div> <div class="details-section"> <div class="detail-title-row"> <h1 class="detail-title">${listingToRender.title}</h1> <div class="detail-price">$${listingToRender.price}</div> </div> <div class="detail-meta-grid"> <div class="detail-meta-item"> <i class="fas fa-map-marker-alt"></i> <span> <span class="location">${getLocationName(listingToRender.location)}</span>, <span class="time-ago">${getTimeAgo(listingToRender.createdAt)}</span> </span> </div> <div class="detail-meta-item"> <i class="fas fa-tag"></i> <span>${formattedCategory}</span> </div> <div class="detail-meta-item"> <i class="fas fa-user"></i> <span>Listed by: <a href="#" id="view-owner-profile-link">${ownerToRender ? ownerToRender.displayName : 'Unknown'}</a></span> </div> </div> </div> </div> <div class="detail-card actions-card"> <div class="actions-card"> ${isOwnListing ? ` <button class="btn-edit action-button" id="edit-listing-btn" data-id="${listingToRender._id}"> <i class="fas fa-edit"></i> Edit </button> <button class="btn-danger action-button" id="delete-listing-btn" data-id="${listingToRender._id}"> <i class="fas fa-trash-alt"></i> Delete </button> ` : ` <button class="btn-primary action-button" id="contact-seller-btn"> <i class="fas fa-envelope"></i> Contact </button> `} <button class="btn-info action-button" id="like-listing-btn"> <i class="${isLiked ? 'fas' : 'far'} fa-thumbs-up ${isLiked ? 'liked-icon' : ''}"></i> ${(listingToRender.likesCount || 0) === 1 ? '1 Like' : `${listingToRender.likesCount || 0} Likes`} </button> <button class="btn-info action-button" id="favorite-listing-btn"> <i class="${isFavorited ? 'fas' : 'far'} fa-bookmark ${isFavorited ? 'favorited-icon' : ''}"></i> <span>${isFavorited ? 'Saved' : 'Save'}</span> </button> <button class="btn-info action-button" id="share-listing-btn"> <i class="fas fa-share-alt"></i> <span>Share</span> </button> </div> </div> <div class="detail-card description-card"> <h3>Description</h3> <div class="detail-description">${formatDescriptionForDisplay(listingToRender.description)}</div> </div> `;if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = html;initializeDOMElements();const sliderContainer = document.getElementById('image-slider-container');const slider = document.getElementById('image-slider');const prevArrow = document.getElementById('prev-arrow');const nextArrow = document.getElementById('next-arrow');const dots = Array.from(document.querySelectorAll('.dot'));const slides = Array.from(document.querySelectorAll('.slide'));let currentIndex = 0;let isDragging = false;let startPos = 0;let currentTranslate = 0;let prevTranslate = 0;let animationID;if (listingToRender.images.length <= 1) {if (prevArrow) prevArrow.style.display = 'none';if (nextArrow) nextArrow.style.display = 'none';if (dots.length > 0) dots[0].style.display = 'none';if (document.getElementById('dots-container')) document.getElementById('dots-container').style.display = 'none';} updateSliderPosition();updateDots();updateArrowVisibility();sliderContainer?.addEventListener('touchstart', touchStart);sliderContainer?.addEventListener('touchmove', touchMove);sliderContainer?.addEventListener('touchend', touchEnd);sliderContainer?.addEventListener('mousedown', touchStart);sliderContainer?.addEventListener('mousemove', touchMove);sliderContainer?.addEventListener('mouseup', touchEnd);sliderContainer?.addEventListener('mouseleave', touchEnd);if (prevArrow) prevArrow.addEventListener('click', () => navigate(-1));if (nextArrow) nextArrow.addEventListener('click', () => navigate(1));dots.forEach(dot => {dot.addEventListener('click', () => {const dotIndex = parseInt(dot.getAttribute('data-index'));goToSlide(dotIndex);});});slides.forEach(slide => {slide.addEventListener('click', () => {const imgSrc = slide.querySelector('img').src;openFullImage(imgSrc);});});function touchStart(e) {if (listingToRender.images.length <= 1) return;if (e.type === 'touchstart') {startPos = e.touches[0].clientX;} else {startPos = e.clientX;e.preventDefault();} isDragging = true;slider.style.transition = 'none';animationID = requestAnimationFrame(animation);} function touchMove(e) {if (!isDragging || listingToRender.images.length <= 1) return;const currentPosition = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX;const diff = currentPosition - startPos;if ((currentIndex === 0 && diff > 0) || (currentIndex === listingToRender.images.length - 1 && diff < 0)) {currentTranslate = prevTranslate + diff * 0.2;} else {currentTranslate = prevTranslate + diff;} } function touchEnd() {if (!isDragging || listingToRender.images.length <= 1) return;cancelAnimationFrame(animationID);isDragging = false;const movedBy = currentTranslate - prevTranslate;if (movedBy < -50 && currentIndex < listingToRender.images.length - 1) {navigate(1);} else if (movedBy > 50 && currentIndex > 0) {navigate(-1);} else {goToSlide(currentIndex);} } function animation() {setSliderPosition();if (isDragging) {animationID = requestAnimationFrame(animation);} } function setSliderPosition() {slider.style.transform = `translateX(${currentTranslate}px)`;} function navigate(direction) {const newIndex = currentIndex + direction;if (newIndex >= 0 && newIndex < listingToRender.images.length) {goToSlide(newIndex);} } function goToSlide(index) {currentIndex = index;prevTranslate = currentTranslate = -currentIndex * sliderContainer.offsetWidth;slider.style.transition = 'transform 0.5s ease';updateSliderPosition();updateDots();updateArrowVisibility();} function updateSliderPosition() {slider.style.transform = `translateX(${-currentIndex * sliderContainer.offsetWidth}px)`;} function updateDots() {dots.forEach((dot, index) => {dot.classList.toggle('active', index === currentIndex);});} function updateArrowVisibility() {if (listingToRender.images.length <= 1) return;if (prevArrow) prevArrow.style.visibility = currentIndex > 0 ? 'visible' : 'hidden';if (nextArrow) nextArrow.style.visibility = currentIndex < listingToRender.images.length - 1 ? 'visible' : 'hidden';} updateMetaTags();updateActiveNavTab();if (!isOwnListing) {document.getElementById('contact-seller-btn')?.addEventListener('click', () => {openContactModal(listingToRender.userId, listingToRender);});} document.getElementById('share-listing-btn')?.addEventListener('click', () => {const shareModal = document.getElementById('share-modal');const shareUrl = `${window.location.origin}/${currentListing.type}/${currentListing.slug}`;const shareText = `Check out this listing on Keid: ${currentListing.title}`;const facebookLink = `https: const twitterLink = `https: const whatsappLink = `https: shareModal.querySelector('.social-share-buttons .facebook').href = facebookLink;shareModal.querySelector('.social-share-buttons .twitter').href = twitterLink;shareModal.querySelector('.social-share-buttons .whatsapp').href = whatsappLink;document.getElementById('share-url').value = shareUrl;shareModal.style.display = 'flex';});document.getElementById('copy-url-btn')?.addEventListener('click', () => {const shareUrl = document.getElementById('share-url');shareUrl.select();navigator.clipboard.writeText(shareUrl.value) .then(() => {showMessage('Link copied to clipboard!', 'success');const btn = document.getElementById('copy-url-btn');btn.innerHTML = '<i class="fas fa-check"></i> Copied!';setTimeout(() => {btn.innerHTML = '<i class="fas fa-copy"></i> Copy';}, 2000);}) .catch(err => {console.error('Failed to copy URL: ', err);showMessage('Failed to copy link', 'error');});});document.querySelector('#share-modal .modal-close')?.addEventListener('click', () => {document.getElementById('share-modal').style.display = 'none';});if (ownerToRender) {document.getElementById('view-owner-profile-link')?.addEventListener('click', (e) => {e.preventDefault();renderView('profile', ownerToRender.slug);});} addListingCardEventListeners();};const skeletonHtml = ` <div class="detail-container"> <div class="detail-card image-details-card"> <div class="image-header-container"> <div class="skeleton-image" style="height: 100%;"></div> </div> <div class="details-section"> <div class="detail-title-row"> <div class="skeleton-title" style="width: 70%;height: 40px;"></div> <div class="skeleton-price" style="width: 30%;height: 20px;"></div> </div> <div class="detail-meta-grid"> <div class="skeleton-meta" style="width: 100%;height: 20px;margin-bottom: 10px;"></div> <div class="skeleton-meta" style="width: 100%;height: 20px;margin-bottom: 10px;"></div> <div class="skeleton-meta" style="width: 100%;height: 20px;"></div> </div> </div> </div> <div class="detail-card"> <div style="display: flex;gap: 10px;"> <div class="skeleton-button" style="width: 100%;height: 40px;"></div> <div class="skeleton-button" style="width: 100%;height: 40px;"></div> <div class="skeleton-button" style="width: 100%;height: 40px;"></div> </div> </div> <div class="detail-card description-card"> <div class="skeleton-title" style="width: 30%;height: 20px;margin-bottom: 15px;"></div> <div class="skeleton-meta" style="width: 100%;height: 150px;"></div> </div> </div> `;if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = skeletonHtml;initializeDOMElements();if (listing && owner) {await renderContent(listing, owner);} try {let latestListing = listing;let latestOwner = owner;if (!latestListing) {latestListing = await listingAPI.getListing(actualIdentifier);if (renderId !== currentActiveRenderId) return;if (!latestListing) {throw new Error("Listing not found.");} latestOwner = latestListing.userId;} else if (!latestOwner) {latestOwner = await userAPI.getProfile(latestListing.userId._id);if (renderId !== currentActiveRenderId) return;} setCachedListingDetails(latestListing.slug, latestListing);setCachedListingDetails(latestListing._id, latestListing);setCachedUserProfile(latestOwner.slug, latestOwner);setCachedUserProfile(latestOwner._id, latestOwner);if (!listing || JSON.stringify(listing) !== JSON.stringify(latestListing) || JSON.stringify(owner) !== JSON.stringify(latestOwner)) {await renderContent(latestListing, latestOwner);} } catch (error) {if (renderId !== currentActiveRenderId) return;console.error('Error rendering listing detail:', error);showMessage(error.message || 'Error loading listing details', 'error');if (error.message == "Listing not found.") {DOMElements.mainContent.innerHTML = ` <div class="not-found-container"> <div class="not-found-content"> <i class="fas fa-exclamation-triangle not-found-icon"></i> <h2 class="not-found-title">Oops! Listing Not Found</h2> <p class="not-found-message">The listing you're looking for doesn't exist or may have been removed.</p> <button class="btn-primary" id="go-home-btn"> <i class="fas fa-home"></i> Go Back Home </button> </div> </div> `;document.getElementById('go-home-btn')?.addEventListener('click', () => {renderView('home');});;} else {DOMElements.mainContent.innerHTML = ` <div class="not-found-container"> <div class="not-found-content"> <i class="fas fa-exclamation-triangle not-found-icon"></i> <p class="not-found-message">Failed to load listing details.</p> <button class="btn-primary retry-listing-detail-btn" data-id="${actualIdentifier}">Try Again</button> </div> </div>`;document.querySelector('.retry-listing-detail-btn')?.addEventListener('click', (e) => {renderView('listing-detail', e.target.dataset.id);});} initializeDOMElements();} } import {currentActiveRenderId, currentSortBy, setCurrentSortBy, categories, locations, setCachedProducts, cachedProducts, setCachedServices, cachedServices, setCachedCombinedListings, cachedCombinedListings, CACHE_DURATION, } from '../state.js';import {showMessage, createSkeletonCards, sortListings, } from '../utils.js';function isCacheFresh(timestamp) {return (Date.now() - timestamp) < CACHE_DURATION;} function getCategoryDataById(categoryId) {if (!categories || !categories.categories || !categoryId) return null;return categories.categories.find(cat => cat.id === categoryId);} if (renderId !== currentActiveRenderId) return;const {category: categoryId } = params;const selectedLocation = getSelectedLocation();const categoryData = getCategoryDataById(categoryId);const categoryName = categoryData?.name || 'Category';updatePageTitle(`${categoryName} - Keid`);const renderContent = (sortedListings) => {if (renderId !== currentActiveRenderId) return;tempListingCache.clear();sortedListings.forEach(listing => tempListingCache.set(listing._id, listing));const noListingsMessage = ` <div class="error-container"> <div class="not-found-content"> <i class="fas fa-exclamation-triangle not-found-icon"></i> <h2 class="not-found-title">No Listings Found</h2> <p class="not-found-message">There are currently no listings available in this category or location.</p> </div> </div> `;const listingsGrid = DOMElements.mainContent.querySelector('.listings-grid');listingsGrid.innerHTML = sortedListings && sortedListings.length > 0 ? sortedListings.map(listing => createListingCard(listing)).join('') : noListingsMessage;addListingCardEventListeners();};const skeletonHtml = ` <div style="display: flex;justify-content: space-between;align-items: center;margin-bottom: 20px;"> <div> <h2 class="section-title">${categoryName}</h2> <p class="section-subtitle">Browse ${categoryName} products and services</p> </div> <div> <select id="sort-by" class="sort-dropdown"> <option value="recommended" ${currentSortBy === 'recommended' ? 'selected' : ''}>Sort by: Recommended</option> <option value="latest" ${currentSortBy === 'latest' ? 'selected' : ''}>Sort by: Latest</option> <option value="name" ${currentSortBy === 'name' ? 'selected' : ''}>Sort by: Name</option> <option value="price-low-to-high" ${currentSortBy === 'price-low-to-high' ? 'selected' : ''}>Sort by: Lowest Price</option> <option value="price-high-to-low" ${currentSortBy === 'price-high-to-low' ? 'selected' : ''}>Sort by: Highest Price</option> </select> </div> </div> <div class="listings-grid"> ${createSkeletonCards()} </div> `;if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = skeletonHtml;initializeDOMElements();document.getElementById('sort-by')?.addEventListener('change', (e) => {setCurrentSortBy(e.target.value);renderCategory(params, renderId);});let listings = [];let useCached = false;let sortedListings = [];if (isCacheFresh(cachedCombinedListings.timestamp) && cachedCombinedListings.data) {const allCachedListings = [...(cachedCombinedListings.data.products || []), ...(cachedCombinedListings.data.services || [])];listings = allCachedListings.filter(item => item.category === categoryId);if (selectedLocation === 'all') {listings = listings.filter(item => locations.cities.some(city => city.id === item.location));} else if (selectedLocation) {listings = listings.filter(item => item.location === selectedLocation);} sortedListings = sortListings(listings, currentSortBy);useCached = true;renderContent(sortedListings);} try {const latestListings = await listingAPI.getAllListings(null, categoryId);if (renderId !== currentActiveRenderId) return;let filteredListings = latestListings;if (selectedLocation === 'all') {filteredListings = filteredListings.filter(item => locations.cities.some(city => city.id === item.location));} else if (selectedLocation) {filteredListings = filteredListings.filter(item => item.location === selectedLocation);} const sortedLatestListings = sortListings(filteredListings, currentSortBy);setCachedCombinedListings({products: filteredListings.filter(l => l.type === 'product'), services: filteredListings.filter(l => l.type === 'service') });if (!useCached || JSON.stringify(sortedListings) !== JSON.stringify(sortedLatestListings)) {renderContent(sortedLatestListings);} } catch (error) {if (renderId !== currentActiveRenderId) return;console.error('Error rendering category:', error);showMessage(error.message || 'Error loading category page', 'error');const listingsGrid = DOMElements.mainContent.querySelector('.listings-grid');listingsGrid.innerHTML = ` <div class="error-container"> <div class="not-found-content"> <i class="fas fa-exclamation-triangle not-found-icon"></i> <p class="not-found-message">Failed to load category.</p> </div> <button class="btn-primary retry-category-btn" data-category="${categoryId}">Try Again</button> </div>`;document.querySelector('.retry-category-btn')?.addEventListener('click', (e) => {renderView('category', {category: e.target.dataset.category });});initializeDOMElements();} } if (renderId !== currentActiveRenderId) return;updatePageTitle('Products - Keid');const selectedLocation = getSelectedLocation();DOMElements.searchInput.placeholder = 'Search products...';DOMElements.searchInput.setAttribute('data-search-type', 'products');const renderContent = (sortedProducts) => {if (renderId !== currentActiveRenderId) return;tempListingCache.clear();sortedProducts.forEach(listing => tempListingCache.set(listing._id, listing));const noProductsMessage = ` <div class="error-container"> <div class="not-found-content"> <i class="fas fa-box-open not-found-icon"></i> <h2 class="not-found-title">No Products Found</h2> <p class="not-found-message">There are no products available in this category or location.</p> </div> </div> `;const listingsGrid = DOMElements.mainContent.querySelector('.listings-grid');listingsGrid.innerHTML = sortedProducts && sortedProducts.length > 0 ? sortedProducts.map(product => createListingCard(product)).join('') : noProductsMessage;addListingCardEventListeners();};const skeletonHtml = ` <div style="display: flex;justify-content: space-between;align-items: center;margin-bottom: 20px;"> <div> <h2 class="section-title">All Products</h2> <p class="section-subtitle">Browse all available products</p> </div> <div> <select id="sort-by" class="sort-dropdown"> <option value="recommended" ${currentSortBy === 'recommended' ? 'selected' : ''}>Sort by: Recommended</option> <option value="latest" ${currentSortBy === 'latest' ? 'selected' : ''}>Sort by: Latest</option> <option value="name" ${currentSortBy === 'name' ? 'selected' : ''}>Sort by: Name</option> <option value="price-low-to-high" ${currentSortBy === 'price-low-to-high' ? 'selected' : ''}>Sort by: Lowest Price</option> <option value="price-high-to-low" ${currentSortBy === 'price-high-to-low' ? 'selected' : ''}>Sort by: Highest Price</option> </select> </div> </div> <div class="listings-grid"> ${createSkeletonCards()} </div> `;if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = skeletonHtml;initializeDOMElements();document.getElementById('sort-by')?.addEventListener('change', (e) => {setCurrentSortBy(e.target.value);renderProducts(params, renderId);});let products = [];let useCached = false;if (isCacheFresh(cachedProducts.timestamp) && cachedProducts.data) {products = cachedProducts.data;if (selectedLocation === 'all') {products = products.filter(product => locations.cities.some(city => city.id === product.location));} else if (selectedLocation) {products = products.filter(product => product.location === selectedLocation);} const sortedProducts = sortListings(products, currentSortBy);useCached = true;renderContent(sortedProducts);} try {let latestProducts = await listingAPI.getAllListings('product');if (renderId !== currentActiveRenderId) return;if (selectedLocation === 'all') {latestProducts = latestProducts.filter(product => locations.cities.some(city => city.id === product.location));} else if (selectedLocation) {latestProducts = latestProducts.filter(product => product.location === selectedLocation);} const sortedLatestProducts = sortListings(latestProducts, currentSortBy);setCachedProducts(latestProducts);if (!useCached || JSON.stringify(products) !== JSON.stringify(latestProducts)) {renderContent(sortedLatestProducts);} } catch (error) {if (renderId !== currentActiveRenderId) return;console.error('Error rendering products:', error);showMessage(error.message || 'Error loading products page', 'error');const listingsGrid = DOMElements.mainContent.querySelector('.listings-grid');listingsGrid.innerHTML = ` <div class="error-container"> <div class="not-found-content"> <i class="fas fa-exclamation-triangle not-found-icon"></i> <p class="not-found-message">Failed to load products.</p> </div> <button class="btn-primary retry-products-btn">Try Again</button> </div>`;document.querySelector('.retry-products-btn')?.addEventListener('click', () => {renderView('products');});initializeDOMElements();} } if (renderId !== currentActiveRenderId) return;updatePageTitle('Services - Keid');const selectedLocation = getSelectedLocation();DOMElements.searchInput.placeholder = 'Search services...';DOMElements.searchInput.setAttribute('data-search-type', 'services');const renderContent = (sortedServices) => {if (renderId !== currentActiveRenderId) return;tempListingCache.clear();sortedServices.forEach(listing => tempListingCache.set(listing._id, listing));const noServicesMessage = ` <div class="error-container"> <div class="not-found-content"> <i class="fas fa-box-open not-found-icon"></i> <h2 class="not-found-title">No Services Found</h2> <p class="not-found-message">There are no services available in this category or location.</p> </div> </div> `;const listingsGrid = DOMElements.mainContent.querySelector('.listings-grid');listingsGrid.innerHTML = sortedServices && sortedServices.length > 0 ? sortedServices.map(service => createListingCard(service)).join('') : noServicesMessage;addListingCardEventListeners();};const skeletonHtml = ` <div style="display: flex;justify-content: space-between;align-items: center;margin-bottom: 20px;"> <div> <h2 class="section-title">All Services</h2> <p class="section-subtitle">Browse all available services</p> </div> <div> <select id="sort-by" class="sort-dropdown"> <option value="recommended" ${currentSortBy === 'recommended' ? 'selected' : ''}>Sort by: Recommended</option> <option value="latest" ${currentSortBy === 'latest' ? 'selected' : ''}>Sort by: Latest</option> <option value="name" ${currentSortBy === 'name' ? 'selected' : ''}>Sort by: Name</option> <option value="price-low-to-high" ${currentSortBy === 'price-low-to-high' ? 'selected' : ''}>Sort by: Lowest Price</option> <option value="price-high-to-low" ${currentSortBy === 'price-high-to-low' ? 'selected' : ''}>Sort by: Highest Price</option> </select> </div> </div> <div class="listings-grid"> ${createSkeletonCards()} </div> `;if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = skeletonHtml;initializeDOMElements();document.getElementById('sort-by')?.addEventListener('change', (e) => {setCurrentSortBy(e.target.value);renderServices(params, renderId);});let services = [];let useCached = false;if (isCacheFresh(cachedServices.timestamp) && cachedServices.data) {services = cachedServices.data;if (selectedLocation === 'all') {services = services.filter(service => locations.cities.some(city => city.id === service.location));} else if (selectedLocation) {services = services.filter(service => service.location === selectedLocation);} const sortedServices = sortListings(services, currentSortBy);useCached = true;renderContent(sortedServices);} try {let latestServices = await listingAPI.getAllListings('service');if (renderId !== currentActiveRenderId) return;if (selectedLocation === 'all') {latestServices = latestServices.filter(service => locations.cities.some(city => city.id === service.location));} else if (selectedLocation) {latestServices = latestServices.filter(service => service.location === selectedLocation);} const sortedLatestServices = sortListings(latestServices, currentSortBy);setCachedServices(latestServices);if (!useCached || JSON.stringify(services) !== JSON.stringify(latestServices)) {renderContent(sortedLatestServices);} } catch (error) {if (renderId !== currentActiveRenderId) return;console.error('Error rendering services:', error);showMessage(error.message || 'Error loading services page', 'error');const listingsGrid = DOMElements.mainContent.querySelector('.listings-grid');listingsGrid.innerHTML = ` <div class="error-container"> <div class="not-found-content"> <i class="fas fa-exclamation-triangle not-found-icon"></i> <p class="not-found-message">Failed to load services.</p> </div> <button class="btn-primary retry-services-btn">Try Again</button> </div> `;document.querySelector('.retry-services-btn')?.addEventListener('click', () => {renderView('services');});initializeDOMElements();} } if (renderId !== currentActiveRenderId) return;const query = DOMElements.searchInput.value.trim().toLowerCase();const category = DOMElements.categorySelect.value;let searchType = DOMElements.searchInput.getAttribute('data-search-type') || 'all';DOMElements.searchInput.setAttribute('data-search-type', searchType);const skeletonHtml = ` <div style="display: flex;justify-content: space-between;align-items: center;margin-bottom: 20px;"> <div> <h2 class="section-title">Search Results</h2> <p class="section-subtitle">Searching for "${query}" in ${searchType}</p> </div> <div> <select id="sort-by" class="sort-dropdown"> <option value="recommended">Sort by: Recommended</option> <option value="latest">Sort by: Latest</option> <option value="name">Sort by: Name</option> <option value="price-low-to-high">Sort by: Lowest Price</option> <option value="price-high-to-low">Sort by: Highest Price</option> </select> </div> </div> <div class="listings-grid"> ${createSkeletonCards()} </div> `;if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = skeletonHtml;initializeDOMElements();try {let results = await listingAPI.search(query, category, getSelectedLocation());if (renderId !== currentActiveRenderId) return;renderSearchResults(results, query, category, renderId);} catch (error) {if (renderId !== currentActiveRenderId) return;showMessage(error.message || 'Error searching listings', 'error');const listingsGrid = DOMElements.mainContent.querySelector('.listings-grid');listingsGrid.innerHTML = ` <div class="error-container"> <div class="not-found-content"> <i class="fas fa-exclamation-triangle not-found-icon"></i> <p class="not-found-message">Failed to load search results.</p> </div> <button class="btn-primary retry-search-btn">Try Again</button> </div>` document.querySelector('.retry-search-btn')?.addEventListener('click', () => {handleSearch();});initializeDOMElements();} } if (renderId !== currentActiveRenderId) return;tempListingCache.clear();results.forEach(listing => tempListingCache.set(listing._id, listing));const selectedLocation = getSelectedLocation();const sortedResults = sortListings(results, currentSortBy);const noResultsMessage = ` <div class="error-container"> <div class="not-found-content"> <i class="fas fa-search not-found-icon"></i> <h2 class="not-found-title">No Results Found</h2> <p class="not-found-message">We couldn't find any listings matching your search. Try refining your search or exploring other categories.</p> </div> </div> `;const html = ` <div style="display: flex;justify-content: space-between;align-items: center;margin-bottom: 20px;"> <div> <h2 class="section-title">Search Results</h2> <p class="section-subtitle">Showing results for "${query}"${selectedLocation && selectedLocation !== 'all' ? ` in ${getLocationName(selectedLocation)}` : ''}</p> </div> <div> <select id="sort-by" class="sort-dropdown"> <option value="recommended" ${currentSortBy === 'recommended' ? 'selected' : ''}>Sort by: Recommended</option> <option value="latest" ${currentSortBy === 'latest' ? 'selected' : ''}>Sort by: Latest</option> <option value="name" ${currentSortBy === 'name' ? 'selected' : ''}>Sort by: Name</option> <option value="price-low-to-high" ${currentSortBy === 'price-low-to-high' ? 'selected' : ''}>Sort by: Lowest Price</option> <option value="price-high-to-low" ${currentSortBy === 'price-high-to-low' ? 'selected' : ''}>Sort by: Highest Price</option> </select> </div> </div> ${sortedResults && sortedResults.length > 0 ? ` <div class="listings-grid"> ${sortedResults.map(item => createListingCard(item)).join('')} </div> ` : noResultsMessage} `;if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = html;initializeDOMElements();document.getElementById('sort-by')?.addEventListener('change', (e) => {setCurrentSortBy(e.target.value);const sortedResults = sortListings(results, currentSortBy);renderSearchResults(sortedResults, query, category, renderId);});addListingCardEventListeners();document.getElementById('browse-categories-btn')?.addEventListener('click', () => {renderView('home');});} if (renderId !== currentActiveRenderId) return;updatePageTitle('Browse - Keid');const selectedLocation = getSelectedLocation();const renderContent = (sortedListings) => {if (renderId !== currentActiveRenderId) return;tempListingCache.clear();sortedListings.forEach(listing => tempListingCache.set(listing._id, listing));const noListingsMessage = ` <div class="error-container"> <div class="not-found-content"> <i class="fas fa-box-open not-found-icon"></i> <h2 class="not-found-title">No Listings Found</h2> <p class="not-found-message">There are no listings available in this location.</p> </div> </div> `;let listingsGrid = DOMElements.mainContent.querySelector('.listings-grid');if (!listingsGrid) {const tempDiv = document.createElement('div');tempDiv.className = 'listings-grid';DOMElements.mainContent.appendChild(tempDiv);listingsGrid = tempDiv;} listingsGrid.innerHTML = sortedListings && sortedListings.length > 0 ? sortedListings.map(listing => createListingCard(listing)).join('') : noListingsMessage;addListingCardEventListeners();};const skeletonHtml = ` <div style="display: flex;justify-content: space-between;align-items: center;margin-bottom: 20px;"> <div> <h2 class="section-title">All Listings</h2> <p class="section-subtitle">Browse all available products and services</p> </div> <div> <select id="sort-by" class="sort-dropdown"> <option value="recommended" ${currentSortBy === 'recommended' ? 'selected' : ''}>Sort by: Recommended</option> <option value="latest" ${currentSortBy === 'latest' ? 'selected' : ''}>Sort by: Latest</option> <option value="name" ${currentSortBy === 'name' ? 'selected' : ''}>Sort by: Name</option> <option value="price-low-to-high" ${currentSortBy === 'price-low-to-high' ? 'selected' : ''}>Sort by: Lowest Price</option> <option value="price-high-to-low" ${currentSortBy === 'price-high-to-low' ? 'selected' : ''}>Sort by: Highest Price</option> </select> </div> </div> <div class="listings-grid"> ${createSkeletonCards()} </div> `;if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = skeletonHtml;initializeDOMElements();document.getElementById('sort-by')?.addEventListener('change', (e) => {setCurrentSortBy(e.target.value);renderBrowseListings(renderId);});let combinedListings = [];let useCached = false;if (isCacheFresh(cachedCombinedListings.timestamp) && cachedCombinedListings.data) {combinedListings = [...(cachedCombinedListings.data.products || []), ...(cachedCombinedListings.data.services || [])];if (selectedLocation === 'all') {combinedListings = combinedListings.filter(item => locations.cities.some(city => city.id === item.location));} else if (selectedLocation) {combinedListings = combinedListings.filter(item => item.location === selectedLocation);} const sortedListings = sortListings(combinedListings, currentSortBy);useCached = true;renderContent(sortedListings);} try {const latestCombinedListings = await listingAPI.getAllListings();if (renderId !== currentActiveRenderId) return;let filteredListings = latestCombinedListings;if (selectedLocation === 'all') {filteredListings = filteredListings.filter(item => locations.cities.some(city => city.id === item.location));} else if (selectedLocation) {filteredListings = filteredListings.filter(item => item.location === selectedLocation);} const sortedLatestListings = sortListings(filteredListings, currentSortBy);setCachedCombinedListings({products: filteredListings.filter(l => l.type === 'product'), services: filteredListings.filter(l => l.type === 'service') });if (!useCached || JSON.stringify(combinedListings) !== JSON.stringify(latestCombinedListings)) {renderContent(sortedLatestListings);} } catch (error) {if (renderId !== currentActiveRenderId) return;console.error('Error rendering browse listings:', error);showMessage(error.message || 'Error loading listings', 'error');const listingsGrid = DOMElements.mainContent.querySelector('.listings-grid');listingsGrid.innerHTML = ` <div class="error-container"> <div class="not-found-content"> <i class="fas fa-exclamation-triangle not-found-icon"></i> <p class="not-found-message">Failed to load listings.</p> </div> <button class="btn-primary retry-browse-btn">Try Again</button> </div> `;document.querySelector('.retry-browse-btn')?.addEventListener('click', () => {renderView('browse-listings');});initializeDOMElements();} } import {currentUser, setCurrentUser, currentActiveRenderId, cachedUserProfile, cachedUserListings, cachedUserFavorites, CACHE_DURATION, setCachedUserProfile, setCachedUserListings, setCachedUserFavorites, } from '../state.js';import {showMessage, createSkeletonCards, compressImage, formatDescriptionForDisplay, showLoadingDialog, hideLoadingDialog } from '../utils.js';function isCacheFresh(timestamp) {return (Date.now() - timestamp) < CACHE_DURATION;} function openFullImage(imageSrc) {if (DOMElements.fullImageView && DOMElements.fullImage) {DOMElements.fullImage.src = imageSrc;DOMElements.fullImageView.style.display = 'flex';const closeHandler = () => {DOMElements.fullImageView.style.display = 'none';DOMElements.fullImageView.removeEventListener('click', closeHandler);if (DOMElements.closeFullImage) {DOMElements.closeFullImage.removeEventListener('click', closeHandler);} };DOMElements.fullImageView.addEventListener('click', closeHandler);if (DOMElements.closeFullImage) {DOMElements.closeFullImage.addEventListener('click', closeHandler);} } } if (renderId !== currentActiveRenderId) return;let profileIdentifier = identifier;if (typeof identifier === 'object' && identifier !== null) {if (identifier.slug) {profileIdentifier = identifier.slug;} else if (identifier._id) {profileIdentifier = identifier._id;} else {console.error('renderProfile received an object without slug or _id:', identifier);showMessage('Invalid profile identifier. Cannot load profile.', 'error');DOMElements.mainContent.innerHTML = ` <div class="not-found-container"> <div class="not-found-content"> <i class="fas fa-exclamation-triangle not-found-icon"></i> <h2 class="not-found-title">Invalid Profile Link</h2> <p class="not-found-message">The link you followed is invalid or incomplete.</p> <button class="btn-primary" id="go-home-btn"> <i class="fas fa-home"></i> Go Back Home </button> </div> </div> `;document.getElementById('go-home-btn')?.addEventListener('click', () => {renderView('home');});initializeDOMElements();return;} } else if (typeof identifier !== 'string') {console.error('renderProfile received unexpected identifier type:', identifier);showMessage('Invalid profile identifier. Cannot load profile.', 'error');DOMElements.mainContent.innerHTML = ` <div class="not-found-container"> <div class="not-found-content"> <i class="fas fa-exclamation-triangle not-found-icon"></i> <h2 class="not-found-title">Invalid Profile Link</h2> <p class="not-found-message">The link you followed is invalid or incomplete.</p> <button class="btn-primary" id="go-home-btn"> <i class="fas fa-home"></i> Go Back Home </button> </div> </div> `;document.getElementById('go-home-btn')?.addEventListener('click', () => {renderView('home');});initializeDOMElements();return;} if (!currentUser && profileIdentifier !== (currentUser?.slug || currentUser?._id)) {showMessage('Please login to view this profile.', 'error');if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = '<p>You need to be logged in to view this profile.</p>';initializeDOMElements();return;} DOMElements.mainContent.dataset.currentProfileIdentifier = profileIdentifier;const renderContent = async (user, listings, favorites, followerCount, isFollowing, isOwnProfile) => {if (renderId !== currentActiveRenderId) return;updatePageTitle(`${user.displayName} - Keid`);const hasListings = listings && listings.length > 0;const html = ` <div class="profile-header"> <img src="${user.profilePic}" alt="Profile Picture" class="profile-avatar" id="profile-pic-display"> <div class="profile-info"> <h1 class="profile-name">${user.displayName}</h1> <div class="profile-meta"> <div><i class="fas fa-calendar-alt"></i> Joined ${new Date(user.joinedDate).toLocaleDateString()}</div> <div><i class="fas fa-map-marker-alt"></i> ${getLocationName(user.location)}</div> </div> <div class="profile-stats"> <div class="profile-stat"> <i class="fas fa-user-friends"></i> <span id="follower-count">${followerCount === 1 ? '1 Follower' : `${followerCount || 0} Followers`}</span> </div> <div class="profile-stat"> <i class="fas fa-list"></i> ${user.totalListings === 1 ? '1 Listing' : `${user.totalListings || 0} Listings`} </div> </div> <div class="profile-actions"> ${!isOwnProfile ? ` <button class="btn-primary" id="contact-user-btn"> <i class="fas fa-envelope"></i> Contact </button> <button class="btn-success ${isFollowing ? 'active' : ''}" id="follow-profile-btn"> <i class="${isFollowing ? 'fas' : 'far'} fa-user"></i> ${isFollowing ? 'Following' : 'Follow'} </button> <button class="btn-danger" id="report-user-btn" data-reported-user-id="${user._id}" data-reported-user-name="${user.displayName}"> <i class="fas fa-flag"></i> </button> ` : ` <button class="btn-info" id="edit-profile-btn"> <i class="fas fa-edit"></i> Edit Profile </button> <button class="btn-info" id="share-profile-btn"> <i class="fas fa-share-alt"></i> Share </button> `} </div> </div> </div> <div class="tab-container"> <div class="tabs"> <div class="tab active" id="tab-listings">Listings</div> ${isOwnProfile ? `<div class="tab" id="tab-saved">Saved</div>` : ''} <div class="tab" id="tab-about">About</div> </div> <div class="tab-content active" id="tab-content-listings"> <h2 class="section-title">Listings</h2> ${hasListings ? ` <div class="listings-grid"> ${listings.map(listing => createListingCard(listing, {hideListedBy: true })).join('')} </div> ` : ` <div class="not-found-compressed"> <div class="not-found-content"> <i class="fas fa-box-open not-found-icon"></i> <h2 class="not-found-title">No Listings Yet</h2> <p class="not-found-message"> ${isOwnProfile ? ` You haven't added any listings yet. Use the dashboard when ready! ` : ` ${user.displayName} hasn't added any listings yet. `} </p> </div> </div> `} </div> ${isOwnProfile ? ` <div class="tab-content" id="tab-content-saved"> <h3 class="section-title">Saved Listings</h3> ${favorites && favorites.length > 0 ? ` <div class="listings-grid"> ${favorites.map(listing => createListingCard(listing)).join('')} </div> ` : ` <div class="not-found-compressed"> <div class="not-found-content"> <i class="fas fa-bookmark not-found-icon"></i> <h2 class="not-found-title">No Saved Listings Yet</h2> <p class="not-found-message">You haven't saved any listings yet.</p> <button class="btn-primary" id="browse-listings-from-profile-btn"> <i class="fas fa-search"></i> Browse Listings </button> </div> </div> `} </div> ` : ''} <div class="tab-content" id="tab-content-about"> <h2 class="section-title">About</h2> <p>${formatDescriptionForDisplay(user.bio || 'No bio available')}</p> </div> </div> `;if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = html;initializeDOMElements();document.getElementById('profile-pic-display')?.addEventListener('click', () => {openFullImage(user.profilePic);});if (!isOwnProfile) {document.getElementById('contact-user-btn')?.addEventListener('click', () => {openContactModal(user);});document.getElementById('follow-profile-btn')?.addEventListener('click', () => {toggleFollowStatus(user._id);});document.getElementById('report-user-btn')?.addEventListener('click', () => {openReportUserModal(user);});} if (isOwnProfile) {document.getElementById('edit-profile-btn')?.addEventListener('click', () => {openEditProfileModal(user);});document.getElementById('share-profile-btn')?.addEventListener('click', () => {openShareProfileModal(user);});document.getElementById('browse-listings-from-profile-btn')?.addEventListener('click', () => {renderView('browse-listings');});} const switchProfileTab = (tabId, contentId) => {document.querySelectorAll('.profile-header + .tab-container .tab').forEach(tab => tab.classList.remove('active'));document.querySelectorAll('.profile-header + .tab-container .tab-content').forEach(content => content.classList.remove('active'));document.getElementById(tabId).classList.add('active');document.getElementById(contentId).classList.add('active');};document.getElementById('tab-listings')?.addEventListener('click', () => {switchProfileTab('tab-listings', 'tab-content-listings');});document.getElementById('tab-about')?.addEventListener('click', () => {switchProfileTab('tab-about', 'tab-content-about');});if (isOwnProfile) {document.getElementById('tab-saved')?.addEventListener('click', () => {switchProfileTab('tab-saved', 'tab-content-saved');});} addListingCardEventListeners();};const skeletonHtml = ` <div class="profile-header"> <div class="profile-avatar" style="background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);border: none;background-size: 200% 100%;animation: shimmer 1.5s infinite;"></div> <div class="profile-info"> <div class="profile-meta"> <div class="skeleton-title" style="width: 60%;height: 30px;margin-bottom: 10px;"></div> <div style="width: 40%;height: 20px;background-color: #f0f0f0;;"></div> </div> <div class="profile-actions"> <div style="width: 50%;height: 40px;background-color: #f0f0f0;border-radius: 8px;"></div> </div> </div> </div> <div class="tab-container"> <div class="tabs"> <div class="tab" style="width: 200px;height: 40px;background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);background-size: 200% 100%;animation: shimmer 1.5s infinite;"></div> </div> <div class="tab-content active"> <div style="display: flex;justify-content: space-between;margin-bottom: 20px;"> <div style="width: 30%;height: 30px;background-color: #f0f0f0;"></div> </div> <div class="listings-grid"> ${createSkeletonCards()} </div> </div> </div> `;if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = skeletonHtml;initializeDOMElements();let user = null;let listings = [];let favorites = [];let followerCount = 0;let isFollowing = false;let isOwnProfile = currentUser && (currentUser._id === profileIdentifier || currentUser.slug === profileIdentifier);let useCached = false;if (cachedUserProfile[profileIdentifier] && isCacheFresh(cachedUserProfile[profileIdentifier].timestamp)) {user = cachedUserProfile[profileIdentifier].data;isFollowing = user.isFollowing || false;if (isOwnProfile && cachedUserListings.data && isCacheFresh(cachedUserListings.timestamp)) {listings = cachedUserListings.data;} if (isOwnProfile && cachedUserFavorites.data && isCacheFresh(cachedUserFavorites.timestamp)) {favorites = cachedUserFavorites.data;} useCached = true;renderContent(user, listings, favorites, user.followerCount || 0, isFollowing, isOwnProfile);} try {const latestUser = await userAPI.getProfile(profileIdentifier);if (renderId !== currentActiveRenderId) return;if (!latestUser) {if (renderId !== currentActiveRenderId) return;throw new Error("User not found.");} const latestListings = await userAPI.getUserListings(latestUser._id);if (renderId !== currentActiveRenderId) return;let latestFavorites = [];if (isOwnProfile) {latestFavorites = await userAPI.getUserFavorites(currentUser._id);if (renderId !== currentActiveRenderId) return;} const latestFollowerCount = latestUser.followerCount || 0;const latestIsFollowing = latestUser.isFollowing || false;setCachedUserProfile(latestUser.slug, {...latestUser, isFollowing: latestIsFollowing });if (isOwnProfile) {setCachedUserListings(latestListings);setCachedUserFavorites(latestFavorites);} if (!useCached || JSON.stringify(user) !== JSON.stringify(latestUser) || JSON.stringify(listings) !== JSON.stringify(latestListings) || JSON.stringify(favorites) !== JSON.stringify(latestFavorites) || followerCount !== latestFollowerCount || isFollowing !== latestIsFollowing) {await renderContent(latestUser, latestListings, latestFavorites, latestFollowerCount, latestIsFollowing, isOwnProfile);} } catch (error) {if (renderId !== currentActiveRenderId) return;console.error('Error rendering profile:', error);showMessage(error.message || 'Error loading profile page', 'error');if (error.message == "User not found.") {DOMElements.mainContent.innerHTML = ` <div class="not-found-container"> <div class="not-found-content"> <i class="fas fa-user-times not-found-icon"></i> <h2 class="not-found-title">Oops! User Not Found</h2> <p class="not-found-message">The user profile you're looking for doesn't exist or may have been removed.</p> <button class="btn-primary" id="go-home-btn"> <i class="fas fa-home"></i> Go Back Home </button> </div> </div> `;document.getElementById('go-home-btn')?.addEventListener('click', () => {renderView('home');});} else {DOMElements.mainContent.innerHTML = ` <div class="not-found-container"> <div class="not-found-content"> <i class="fas fa-exclamation-triangle not-found-icon"></i> <p class="not-found-message">Failed to load profile.</p> <button class="btn-primary retry-fetch-btn">Try Again</button> </div> </div>`;document.getElementById('retry-fetch-btn')?.addEventListener('click', () => {renderView('profile', profileIdentifier);});} initializeDOMElements();} } const editProfileModal = DOMElements.editProfileModal;const editProfileForm = DOMElements.editProfileForm;const editProfilePicPreview = DOMElements.editProfilePicPreview;const locationName = getLocationName(user.location);const phoneNumber = user.phone?.startsWith('+263') ? user.phone.slice(4) : user.phone || '';const whatsappNumber = user.whatsapp?.startsWith('+263') ? user.whatsapp.slice(4) : user.whatsapp || '';DOMElements.editProfileDisplayName.value = user.displayName;DOMElements.editProfileLocationName.value = locationName;DOMElements.editProfileLocationId.value = user.location;DOMElements.editProfilePhone.value = phoneNumber;DOMElements.editProfileWhatsapp.value = whatsappNumber;DOMElements.editProfileBio.value = user.bio;DOMElements.enablePhone.checked = !!user.phone;DOMElements.enableWhatsapp.checked = !!user.whatsapp;DOMElements.editProfilePhone.disabled = !DOMElements.enablePhone.checked;DOMElements.editProfileWhatsapp.disabled = !DOMElements.enableWhatsapp.checked;DOMElements.enablePhone.addEventListener('change', function() {DOMElements.editProfilePhone.disabled = !this.checked;if (!this.checked) {DOMElements.editProfilePhone.value = '';} });DOMElements.enableWhatsapp.addEventListener('change', function() {DOMElements.editProfileWhatsapp.disabled = !this.checked;if (!this.checked) {DOMElements.editProfileWhatsapp.value = '';} });editProfilePicPreview.innerHTML = ` <div class="image-preview-item"> <img src="${user.profilePic}" alt="Profile Picture" style="width: 80px;height: 80px;object-fit: cover;border-radius: 8px;"> </div> `;DOMElements.editProfilePicUpload.onclick = () => {DOMElements.editProfilePicInput.click();};let newProfilePic = null;DOMElements.editProfilePicInput.onchange = async (e) => {const file = e.target.files[0];if (file && file.type.startsWith('image/')) {showLoadingDialog();try {const compressedBlob = await compressImage(file);const formData = new FormData();formData.append('image', compressedBlob, file.name);const response = await fetch(`https: method: 'POST', body: formData });const result = await response.json();if (result.success) {newProfilePic = result.data.url;editProfilePicPreview.innerHTML = ` <div class="image-preview-item"> <img src="${newProfilePic}" alt="Profile Picture" style="width: 80px;height: 80px;object-fit: cover;border-radius: 8px;"> </div> `;} else {throw new Error(result.error?.message || 'Failed to upload image');} } catch (error) {console.error('Error uploading image:', error);showMessage(error.message || 'Error uploading profile picture', 'error');} finally {hideLoadingDialog();} } };editProfileForm.onsubmit = async (e) => {e.preventDefault();showLoadingDialog();try {const displayName = DOMElements.editProfileDisplayName.value.trim();const location = DOMElements.editProfileLocationId.value;if (!displayName) {showMessage('Please enter a profile name', 'error');return;} if (!location) {showMessage('Please select a location', 'error');return;} const phone = DOMElements.enablePhone.checked && DOMElements.editProfilePhone.value.trim() ? '+263' + DOMElements.editProfilePhone.value.trim() : '';const whatsapp = DOMElements.enableWhatsapp.checked && DOMElements.editProfileWhatsapp.value.trim() ? '+263' + DOMElements.editProfileWhatsapp.value.trim() : '';const bio = DOMElements.editProfileBio.value.trim();const profilePic = newProfilePic || user.profilePic;if (!phone && !whatsapp) {showMessage('Please provide at least one contact method', 'error');return;} const updatedUserData = {displayName, location, phone, whatsapp, bio, profilePic };const updatedUser = await userAPI.updateProfile(currentUser._id, updatedUserData);setCurrentUser(updatedUser);setCachedUserProfile(updatedUser.slug, updatedUser);showMessage('Profile updated!', 'success');closeModal(editProfileModal);updateAuthUI();renderView('profile', currentUser.slug || currentUser._id);} catch (error) {console.error('Error updating profile:', error);showMessage(error.message || 'Error updating profile', 'error');} finally {hideLoadingDialog();} };openModal(editProfileModal);} if (!user || !user.slug) {showMessage('Profile information missing for sharing.', 'error');return;} const profileUrl = `${window.location.origin}/profile/${user.slug}`;const shareText = `Check out ${user.displayName}'s profile on Keid:`;DOMElements.shareProfileUrl.value = profileUrl;DOMElements.shareProfileFacebook.href = `https: DOMElements.shareProfileTwitter.href = `https: DOMElements.shareProfileWhatsapp.href = `https: openModal(DOMElements.shareProfileModal);const copyBtn = DOMElements.copyProfileUrlBtn;if (copyBtn) {copyBtn.replaceWith(copyBtn.cloneNode(true));const newCopyBtn = DOMElements.copyProfileUrlBtn;newCopyBtn.addEventListener('click', () => {DOMElements.shareProfileUrl.select();navigator.clipboard.writeText(DOMElements.shareProfileUrl.value) .then(() => {showMessage('Profile link copied to clipboard!', 'success');const btn = DOMElements.copyProfileUrlBtn;btn.innerHTML = '<i class="fas fa-check"></i> Copied!';setTimeout(() => {btn.innerHTML = '<i class="fas fa-copy"></i> Copy';}, 2000);}) .catch(err => {console.error('Failed to copy profile URL: ', err);showMessage('Failed to copy profile link', 'error');});});} } if (!currentUser) {showMessage('Please login to report a user.', 'error');return;} if (currentUser._id === user._id) {showMessage('You cannot report yourself.', 'error');return;} DOMElements.reportedUserName.textContent = user.displayName;DOMElements.reportedUserIdInput.value = user._id;openModal(DOMElements.reportUserModal);DOMElements.reportUserForm.onsubmit = (e) => handleReportUserSubmit(e, user._id);} async function handleReportUserSubmit(e, reportedUserId) {e.preventDefault();const reason = DOMElements.reportReason.value;const description = DOMElements.reportDescription.value;if (!reason) {showMessage('Please select a reason for reporting.', 'error');return;} showLoadingDialog();try {const response = await reportAPI.submitReport(reportedUserId, reason, description);showMessage(response.message, 'success');closeModal(DOMElements.reportUserModal);} catch (error) {console.error('Error submitting report:', error);showMessage(error.message || 'Failed to submit report.', 'error');} finally {hideLoadingDialog();} } import {currentUser, setCurrentUser, currentActiveRenderId, setCachedUserProfile, } from '../state.js';import {showMessage, updatePasswordStrength, checkPasswordMatch, hideLoadingDialog, showLoadingDialog, validatePassword, } from '../utils.js';if (renderId !== currentActiveRenderId) return;updatePageTitle('Settings - Keid');if (!currentUser) {if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = '<p>Please login to access settings</p>';initializeDOMElements();return;} const html = ` <div class="form-container"> <h2 class="form-title">Settings</h2> <form id="settings-form"> <div class="form-group"> <label for="settings-name">Full Name</label> <input type="text" maxlength="30" id="settings-name" value="${currentUser.name}" required disabled> </div> <div class="form-group"> <label for="settings-email">Email</label> <input type="email" id="settings-email" value="${currentUser.email}" disabled> </div> <div class="form-group"> <label for="settings-password">Password</label> <input type="password" minlength="8" id="settings-password" placeholder="Enter new password"> <div class="password-strength-meter"> <div class="strength-bar"></div> </div> <div class="password-requirements"> <p class="requirement" data-requirement="length"><i class="fas fa-circle"></i> At least 8 characters</p> <p class="requirement" data-requirement="uppercase"><i class="fas fa-circle"></i> Contains uppercase letter</p> <p class="requirement" data-requirement="lowercase"><i class="fas fa-circle"></i> Contains lowercase letter</p> <p class="requirement" data-requirement="number"><i class="fas fa-circle"></i> Contains number</p> <p class="requirement" data-requirement="special"><i class="fas fa-circle"></i> Contains special character</p> </div> </div> <div class="form-group"> <label for="settings-confirm-password">Confirm Password</label> <input type="password" minlength="8" id="settings-confirm-password" placeholder="Confirm new password"> <div id="settings-password-match-feedback" style="display: none;margin-top: 5px;font-size: 12px;"></div> </div> <button type="submit" class="btn-primary">Save Changes</button> </form> </div> `;if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = html;initializeDOMElements();DOMElements.settingsPassword = document.getElementById('settings-password');DOMElements.settingsConfirmPassword = document.getElementById('settings-confirm-password');DOMElements.settingsPasswordMatchFeedback = document.getElementById('settings-password-match-feedback');updatePasswordStrength(DOMElements.settingsPassword.value, 'settings-password');checkPasswordMatch(DOMElements.settingsPassword.value, DOMElements.settingsConfirmPassword.value, DOMElements.settingsPasswordMatchFeedback);DOMElements.settingsPassword.addEventListener('input', () => {updatePasswordStrength(DOMElements.settingsPassword.value, 'settings-password');checkPasswordMatch(DOMElements.settingsPassword.value, DOMElements.settingsConfirmPassword.value, DOMElements.settingsPasswordMatchFeedback);});DOMElements.settingsConfirmPassword.addEventListener('input', () => {updatePasswordStrength(DOMElements.settingsPassword.value, 'settings-password');checkPasswordMatch(DOMElements.settingsPassword.value, DOMElements.settingsConfirmPassword.value, DOMElements.settingsPasswordMatchFeedback);});document.getElementById('settings-form')?.addEventListener('submit', handleSettingsUpdate);} e.preventDefault();const name = DOMElements.settingsName.value;const password = DOMElements.settingsPassword.value;const confirmPassword = DOMElements.settingsConfirmPassword.value;showLoadingDialog();try {if (password) {if (password !== confirmPassword) {showMessage('Passwords do not match', 'error');hideLoadingDialog();return;} const {strength } = validatePassword(password);if (strength < 3) {showMessage('Password is too weak. Please make it stronger.', 'error');hideLoadingDialog();return;} await userAPI.updatePassword(currentUser._id, password);showMessage('Password updated!', 'success');DOMElements.settingsPassword.value = '';DOMElements.settingsConfirmPassword.value = '';updatePasswordStrength('', 'settings-password');checkPasswordMatch('', '', DOMElements.settingsPasswordMatchFeedback);} renderView('profile', currentUser.slug);} catch (error) {console.error('Error updating settings:', error);showMessage(error.message || 'Error updating settings', 'error');} finally {hideLoadingDialog();} } if (renderId !== currentActiveRenderId) return;updatePageTitle('About Us - Keid');const html = ` <div class="about-container"> <h2 class="section-title">About Us</h2> <div class="about-content"> <p>Keid is your go-to platform for discovering and connecting with local sellers, service providers, and businesses. Our goal is simple: make it easy for people to find what they need, when they need it, while keeping the process straightforward and transparent.</p> <p>On Keid, you can explore a variety of listings - from electronics and fashion to services and everyday essentials. Everything happens directly between users, so you can contact sellers or service providers directly to ask questions, negotiate, or arrange pickup.</p> <p>We take pride in keeping Keid a safe and reliable space for everyone. Our team works behind the scenes to ensure listings are clear, accurate, and free from spam or prohibited items. Whether you’re posting an item, searching for a service, or just browsing, we strive to make your experience smooth and trustworthy.</p> <p>By using Keid, you agree to follow our <span id="open-terms-link" class="modal-link">Terms of Service</span> and acknowledge our <span id="open-privacy-link" class="modal-link">Privacy Policy</span>. These documents outline the rules of the platform, how your information is handled, and tips for staying safe while interacting with other users.</p> <p>Our small but dedicated team is committed to improving Keid every day. We’re constantly working to add features, enhance user experience, and ensure the platform remains a valuable resource for our community. If you have any questions, suggestions, or need support, don’t hesitate to reach out - we’re here to help.</p> </div> </div> `;if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = html;initializeDOMElements();document.getElementById('open-terms-link')?.addEventListener('click', () => {openModal(DOMElements.termsModal);});document.getElementById('open-privacy-link')?.addEventListener('click', () => {openModal(DOMElements.privacyModal);});} if (renderId !== currentActiveRenderId) return;updatePageTitle('Contact Us - Keid');const html = ` <div class="contact-container"> <h2 class="section-title">Contact Us</h2> <p class="contact-subtitle">If you have any questions or need assistance, please feel free to reach out to us.</p> <div class="contact-us-container"> <form id="contact-us-form"> <div class="form-group"> <label for="contact-us-name">Name</label> <input type="text" maxlength="50" id="contact-us-name" required> </div> <div class="form-group"> <label for="contact-us-email">Email</label> <input type="email" maxlength="50" id="contact-us-email" required> </div> <div class="form-group"> <label for="contact-us-subject">Subject</label> <input type="text" id="contact-us-subject" required> </div> <div class="form-group"> <label for="contact-us-message">Message</label> <textarea id="contact-us-message" rows="5" required></textarea> </div> <button type="submit" class="btn-primary"> <i class="fas fa-paper-plane"></i> Send Message </button> </form> </div> </div> `;if (renderId !== currentActiveRenderId) return;DOMElements.mainContent.innerHTML = html;initializeDOMElements();document.getElementById('contact-us-form')?.addEventListener('submit', handleContactUsForm);} document.addEventListener('DOMContentLoaded', async () => {await initConfig();});